# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import asyncio
from datetime import datetime

import click
from fastramqpi.raclients.auth import AuthenticatedAsyncHTTPXClient
from fastramqpi.raclients.auth import keycloak_token_endpoint
from more_itertools import one
from pydantic import AnyHttpUrl

from sdtoolplus.autogenerated_graphql_client.client import GraphQLClient
from sdtoolplus.autogenerated_graphql_client.input_types import ClassFilter
from sdtoolplus.autogenerated_graphql_client.input_types import (
    OrganisationUnitCreateInput,
)
from sdtoolplus.autogenerated_graphql_client.input_types import RAValidityInput

BASE_START_DATE = datetime(1970, 1, 1)


# Creates the top unit for RSD
@click.command()
@click.option(
    "--auth-server",
    "auth_server",
    type=click.STRING,
    default="http://keycloak-service:8080/auth",
    help="Keycloak auth server URL",
)
@click.option(
    "--client-id",
    "client_id",
    type=click.STRING,
    default="developer",
    help="Keycloak client id",
)
@click.option(
    "--client-secret",
    "client_secret",
    type=click.STRING,
    required=True,
    help="Keycloak client secret",
)
@click.option(
    "--mo-base-url",
    "mo_base_url",
    type=click.STRING,
    default="http://mo-service:5000",
    help="Base URL for calling MO",
)
def main(
    auth_server: AnyHttpUrl,
    client_id: str,
    client_secret: str,
    mo_base_url: str,
):
    """This script is intended to be run on an empty installation of MO and sets up the top units required for RSDs user-tests"""
    # Fixed uuids to enable the same script to be run twice without creating duplicates
    hierarchy_facet_uuid = "2d4059fa-3660-4945-944a-1ecc92ac91b7"
    adm_hierarchy_uuid = "ac085f9f-d611-4bae-8606-55972a4d1f69"
    pay_heirarchy_uuid = "55d5a67c-a87c-43c6-a9a5-d515298bc054"

    # RSD units to create:
    pay_8S_uuid = "58b543b9-1ed8-4800-ae00-0000012a0002"
    pay_PS_uuid = "30a642bc-1ed8-4800-8600-000001290002"
    adm_org_uuid = "00923955-db6e-49fc-a191-ec36ff151ec7"

    units = [
        {
            "uuid": pay_8S_uuid,
            "name": "8S",
            "user_key": "-",
            "parent": None,
            "org_unit_hierarchy": pay_heirarchy_uuid,
        },
        {
            "uuid": pay_PS_uuid,
            "name": "Psykiatrien i Region Syddanmark (PS)",
            "user_key": "-",
            "parent": pay_8S_uuid,
            "org_unit_hierarchy": None,
        },
        {
            "uuid": adm_org_uuid,
            "name": "Region Syddanmark",
            "user_key": "-",
            "parent": None,
            "org_unit_hierarchy": adm_hierarchy_uuid,
        },
    ]

    async def run_script(gql_client: GraphQLClient):
        org_unit_type = await gql_client.get_class(
            ClassFilter(facet_user_keys=["org_unit_type"], user_keys=["enhed"])
        )
        org_type_uuid = one(org_unit_type.objects).uuid
        facet_query = """
           mutation CreateOrgHierarchyFacet(
             $uuid: UUID!
             $user_key: String!
             $from: DateTime!
           ) {
             facet_create(
               input: { user_key: $user_key, validity: { from: $from }, uuid: $uuid }
             ) {
               uuid
             }
           }
        """
        await gql_client.execute(
            facet_query,
            variables={
                "user_key": "org_hierarchy",
                "uuid": hierarchy_facet_uuid,
                "from": BASE_START_DATE,
            },
        )
        create_org_hierarchy_class = """
        mutation CreateOrgHierarchyClass(
          $uuid: UUID = null
          $user_key: String!
          $name: String!
          $facet_uuid: UUID!
        ) {
          class_create(
            input: {
              name: $name
              user_key: $user_key
              facet_uuid: $facet_uuid
              validity: { from: "1970-01-01" }
              uuid: $uuid
            }
          ) {
            uuid
          }
        }
        """
        await gql_client.execute(
            create_org_hierarchy_class,
            variables={
                "name": "Administrativ organisation",
                "user_key": "ADM_org",
                "uuid": adm_hierarchy_uuid,
                "facet_uuid": hierarchy_facet_uuid,
            },
        )
        await gql_client.execute(
            create_org_hierarchy_class,
            variables={
                "name": "LÃ¸norganisation",
                "user_key": "PAY_org",
                "uuid": pay_heirarchy_uuid,
                "facet_uuid": hierarchy_facet_uuid,
            },
        )

        for unit in units:
            await gql_client.create_org_unit(
                OrganisationUnitCreateInput(
                    **unit,
                    validity=RAValidityInput(from_=BASE_START_DATE),
                    org_unit_type=org_type_uuid,
                )
            )

    http_client = AuthenticatedAsyncHTTPXClient(
        client_id=client_id,
        client_secret=client_secret,
        token_endpoint=keycloak_token_endpoint(
            auth_server=auth_server, auth_realm="mo"
        ),
    )
    gql_client = GraphQLClient(
        url=mo_base_url + "/graphql/v25", http_client=http_client
    )

    asyncio.run(run_script(gql_client))


if __name__ == "__main__":
    main()
