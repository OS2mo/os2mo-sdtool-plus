# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import asyncio
import json
from datetime import datetime

import click
from fastramqpi.raclients.auth import AuthenticatedAsyncHTTPXClient
from fastramqpi.raclients.auth import keycloak_token_endpoint
from more_itertools import first
from more_itertools import one
from pydantic import AnyHttpUrl

from sdtoolplus.autogenerated_graphql_client.client import GraphQLClient
from sdtoolplus.autogenerated_graphql_client.input_types import ClassFilter
from sdtoolplus.autogenerated_graphql_client.input_types import (
    OrganisationUnitCreateInput,
)
from sdtoolplus.autogenerated_graphql_client.input_types import RAValidityInput

"""
Find adm_org units with this query and put result into a file. Copy or mount the file into /tmp/adm_org.json
This query finds all units in the administrative organisation below the unit called "Region Syddanmark" (filtered by ancestor uid)
query GetAdmUnits {
  org_units(
    filter: { ancestor: { uuids: "3d3302bb-72e3-45c0-9255-190a541bd573" } }
  ) {
    objects {
      current {
        uuid
        name
        user_key
        unit_type {
          name
        }
        parent {
          uuid
        }
        ancestors {
          uuid
        }
        related_units {
          org_units(
            filter: { ancestor: { hierarchy: { user_keys: "PAY_ORG" } } }
          ) {
            user_key
          }
        }
      }
    }
  }
}
"""

related_units_mutation = """mutation UpdateRelatedUnits(
  $destination: [UUID!]
  $origin: UUID!
  $from: DateTime!
) {
  related_units_update(
    input: {
      origin: $origin
      validity: { from: $from }
      destination: $destination
    }
  ) {
    uuid
  }
}
"""
find_unit_query = """query FindUnitUUID($user_key: String!) {
  org_units(filter: { user_keys: [$user_key] }) {
    objects {
      uuid
    }
  }
}
"""


@click.command()
@click.option(
    "--auth-server",
    "auth_server",
    type=click.STRING,
    envvar="AUTH_SERVER",
    default="http://keycloak-service:8080/auth",
    help="Keycloak auth server URL",
)
@click.option(
    "--client-id",
    "client_id",
    type=click.STRING,
    envvar="CLIENT_ID",
    default="developer",
    help="Keycloak client id",
)
@click.option(
    "--client-secret",
    "client_secret",
    type=click.STRING,
    envvar="CLIENT_SECRET",
    required=True,
    help="Keycloak client secret",
)
@click.option(
    "--mo-base-url",
    "mo_base_url",
    type=click.STRING,
    default="http://mo-service:5000",
    envvar="MORA_BASE",
    help="Base URL for calling MO",
)
def main(
    auth_server: AnyHttpUrl,
    client_id: str,
    client_secret: str,
    mo_base_url: str,
):
    with open("/tmp/adm_org.json", "r") as file:
        units = json.load(file)

    async def run_script(gql_client: GraphQLClient):
        org_unit_type = await gql_client.get_class(
            ClassFilter(facet_user_keys=["org_unit_type"], user_keys=["enhed"])
        )
        org_type_uuid = one(org_unit_type.objects).uuid
        facet_query = """mutation CreateOrgHierarchyFacet {
            facet_create(input: { user_key: "org_hierarchy", validity: { from: "1970-01-01" }, uuid: "2d4059fa-3660-4945-944a-1ecc92ac91b7" }) {
                uuid
            }
            }
        """
        await gql_client.execute(facet_query)
        class_query = """
        mutation create_adm_org_hierarchy {
          class_create(
            input: { uuid: "ac085f9f-d611-4bae-8606-55972a4d1f69", name: "Administrativ Organisation", user_key: "ADM_ORG", facet_uuid: "2d4059fa-3660-4945-944a-1ecc92ac91b7", validity: { from: "1970-01-01" } }
          ) {
            uuid
          }
        }
        """
        await gql_client.execute(class_query)
        # create top unit manually:
        adm_root = OrganisationUnitCreateInput(
            uuid="00923955-db6e-49fc-a191-ec36ff151ec7",
            name="Region Syddanmark",
            user_key="-",
            parent=None,
            validity=RAValidityInput(from_=datetime.now()),
            org_unit_type=org_type_uuid,
            org_unit_hierarchy="ac085f9f-d611-4bae-8606-55972a4d1f69",
        )
        await gql_client.create_org_unit(adm_root)
        # Sort by amount of ancestors to create the top units first.
        for org_unit in sorted(
            units["data"]["org_units"]["objects"],
            key=lambda u: len(u["current"]["ancestors"]),
        ):
            current = org_unit["current"]
            await gql_client.create_org_unit(
                OrganisationUnitCreateInput(
                    uuid=current["uuid"],
                    name=current["name"],
                    user_key=current["user_key"],
                    parent=current["parent"]["uuid"] if current["parent"] else None,
                    org_unit_type=org_type_uuid,
                    validity=RAValidityInput(from_=datetime.now()),
                )
            )
            unit_uuids = []
            for r in current["related_units"]:
                user_key = one(r["org_units"])["user_key"]
                # Todo: cache
                resp = await gql_client.execute(
                    find_unit_query, variables={"user_key": user_key}
                )
                pay_org = resp.json()["data"]["org_units"]["objects"]
                try:
                    pay_org_uuid = first(pay_org)["uuid"]
                    unit_uuids.append(pay_org_uuid)
                except ValueError:
                    click.echo(f"pay-unit not found {user_key=}")
                    continue
            if unit_uuids:
                rel = await gql_client.execute(
                    related_units_mutation,
                    variables={
                        "origin": current["uuid"],
                        "destination": unit_uuids,
                        "from": datetime.today(),
                    },
                )
                assert rel.json()["data"]

    http_client = AuthenticatedAsyncHTTPXClient(
        client_id=client_id,
        client_secret=client_secret,
        token_endpoint=keycloak_token_endpoint(
            auth_server=auth_server, auth_realm="mo"
        ),
    )
    gql_client = GraphQLClient(
        url=mo_base_url + "/graphql/v25", http_client=http_client
    )

    asyncio.run(run_script(gql_client))


if __name__ == "__main__":
    main()
