# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import asyncio
import json
from datetime import date

import click
import structlog.stdlib
from pydantic import BaseModel
from sdclient.exceptions import SDRootElementNotFound
from sdclient.requests import GetPersonRequest

from scripts.common import get_gql_client
from sdtoolplus.autogenerated_graphql_client import FullEventFilter
from sdtoolplus.autogenerated_graphql_client import GraphQLClient
from sdtoolplus.autogenerated_graphql_client import ListenerFilter
from sdtoolplus.autogenerated_graphql_client import NamespaceFilter
from sdtoolplus.config import SDToolPlusSettings
from sdtoolplus.config import get_settings
from sdtoolplus.depends import SDClient

logger = structlog.stdlib.get_logger()


class SDPersonStatus(BaseModel):
    institution_identifier: str
    cpr: str
    status: str


async def missing_persons(
    gql_client: GraphQLClient,
    settings: SDToolPlusSettings,
    use_test_env: bool,
) -> list[SDPersonStatus]:
    sd_client = SDClient(
        settings.sd_username,
        settings.sd_password.get_secret_value(),
        use_test_env=use_test_env,
    )

    logger.info("Getting person events")
    person_events = await gql_client.get_events(
        FullEventFilter(
            listeners=ListenerFilter(
                routing_keys=["person"], namespaces=NamespaceFilter(names=["sd"])
            )
        )
    )

    sd_persons = []
    for event in person_events.objects:
        subject = json.loads(event.subject)
        institution_identifier = subject["institution_identifier"]
        cpr = subject["cpr"]

        logger.info(
            "Processing event", institution_identifier=institution_identifier, cpr=cpr
        )

        try:
            await asyncio.to_thread(
                sd_client.get_person,
                GetPersonRequest(
                    InstitutionIdentifier=institution_identifier,
                    PersonCivilRegistrationIdentifier=cpr,
                    EffectiveDate=date.today(),
                    ContactInformationIndicator=True,
                    StatusPassiveIndicator=True,
                    PostalAddressIndicator=True,
                ),
            )
            sd_person_status = "OK"
        except SDRootElementNotFound as sd_error:
            assert sd_error.error is not None
            sd_person_status = (
                sd_error.error.get("Envelope", {})
                .get("Body", {})
                .get("Fault", {})
                .get("faultstring", "")
            )

        sd_persons.append(
            SDPersonStatus(
                institution_identifier=institution_identifier,
                cpr=cpr,
                status=sd_person_status,
            )
        )

    return sd_persons


@click.command()
def main() -> None:
    logger.info("Script started")

    settings = get_settings()
    gql_client = get_gql_client()

    sd_persons = asyncio.run(
        missing_persons(
            gql_client=gql_client,
            settings=settings,
            use_test_env=settings.sd_use_test_env,
        )
    )
    sd_person_dicts = [person.dict() for person in sd_persons]

    with open("/tmp/sd-persons.json", "w") as fp:
        json.dump(sd_person_dicts, fp)

    logger.info("Script finished!")


if __name__ == "__main__":
    main()
