# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime

import pytest

from sdtoolplus.autogenerated_graphql_client import RAValidityInput
from sdtoolplus.mo.timeline import get_patch_validity


@pytest.mark.parametrize(
    "codegen_validity_from, codegen_validity_to, mo_validity_from, mo_validity_to, expected_from, expected_to",
    [
        (
            datetime(1900, 1, 1),
            None,
            datetime(2000, 1, 1),
            None,
            datetime(2000, 1, 1),
            None,
        ),
        (
            datetime(2000, 1, 1),
            None,
            datetime(1900, 1, 1),
            None,
            datetime(2000, 1, 1),
            None,
        ),
        (
            datetime(2000, 1, 1),
            datetime(2200, 1, 1),
            datetime(2000, 1, 1),
            datetime(2100, 1, 1),
            datetime(2000, 1, 1),
            datetime(2100, 1, 1),
        ),
        (
            datetime(2000, 1, 1),
            datetime(2100, 1, 1),
            datetime(2000, 1, 1),
            datetime(2200, 1, 1),
            datetime(2000, 1, 1),
            datetime(2100, 1, 1),
        ),
    ],
)
def test__get_update_validity(
    codegen_validity_from: datetime,
    codegen_validity_to: datetime | None,
    mo_validity_from: datetime,
    mo_validity_to: datetime | None,
    expected_from: datetime,
    expected_to: datetime | None,
):
    # Arrange
    mo_validity = RAValidityInput(from_=mo_validity_from, to=mo_validity_to)

    # Act
    actual_validity = get_patch_validity(
        codegen_validity_from, codegen_validity_to, mo_validity
    )

    # Assert
    assert actual_validity == RAValidityInput(from_=expected_from, to=expected_to)
