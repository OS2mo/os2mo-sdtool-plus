# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from uuid import uuid4

import pytest

from sdtoolplus.autogenerated_graphql_client import (
    GetEngagementTimelineEngagementsObjectsValidities,
)
from sdtoolplus.autogenerated_graphql_client import (
    GetEngagementTimelineEngagementsObjectsValiditiesValidity,
)
from sdtoolplus.minisync.engagement import _is_active_in_entire_interval
from sdtoolplus.models import POSITIVE_INFINITY
from tests.test_models import DAY_AFTER_TOMORROW_START
from tests.test_models import MINUS_INFINITY
from tests.test_models import TODAY_START
from tests.test_models import TOMORROW_START
from tests.test_models import YESTERDAY_START

ORG_UNIT_UUID = uuid4()
ENGAGEMENT_TYPE_UUID = uuid4()
JOB_FUNCTION_UUID = uuid4()


def test__is_active_in_entire_interval_returns_false_for_empty_timeline():
    assert not _is_active_in_entire_interval([], TODAY_START, TOMORROW_START)


@pytest.mark.parametrize(
    "start, end, expected",
    [
        (MINUS_INFINITY, TOMORROW_START, False),
        (TODAY_START, POSITIVE_INFINITY, False),
        (TODAY_START, TOMORROW_START, True),
    ],
)
def test__is_active_in_entire_interval_returns_false_when_intervals_too_long(
    start: datetime, end: datetime, expected: bool
):
    # Arrange
    validities = [
        GetEngagementTimelineEngagementsObjectsValidities(
            user_key="II-12345",
            validity=GetEngagementTimelineEngagementsObjectsValiditiesValidity(
                from_=YESTERDAY_START, to=DAY_AFTER_TOMORROW_START
            ),
            employee_uuid=uuid4(),
            org_unit_uuid=ORG_UNIT_UUID,
            engagement_type_uuid=ENGAGEMENT_TYPE_UUID,
            job_function_uuid=JOB_FUNCTION_UUID,
            primary_uuid=None,
        )
    ]

    # Act + Assert
    assert _is_active_in_entire_interval(validities, start, end) == expected


def test__is_active_in_entire_interval_returns_false_for_multiple_active_intervals():
    # Arrange
    validities = [
        GetEngagementTimelineEngagementsObjectsValidities(
            user_key="II-12345",
            validity=GetEngagementTimelineEngagementsObjectsValiditiesValidity(
                from_=YESTERDAY_START, to=TODAY_START
            ),
            employee_uuid=uuid4(),
            org_unit_uuid=ORG_UNIT_UUID,
            engagement_type_uuid=ENGAGEMENT_TYPE_UUID,
            job_function_uuid=JOB_FUNCTION_UUID,
            primary_uuid=None,
        ),
        GetEngagementTimelineEngagementsObjectsValidities(
            user_key="II-12345",
            validity=GetEngagementTimelineEngagementsObjectsValiditiesValidity(
                from_=DAY_AFTER_TOMORROW_START, to=POSITIVE_INFINITY
            ),
            employee_uuid=uuid4(),
            org_unit_uuid=ORG_UNIT_UUID,
            engagement_type_uuid=ENGAGEMENT_TYPE_UUID,
            job_function_uuid=JOB_FUNCTION_UUID,
            primary_uuid=None,
        ),
    ]

    # Act + Assert
    assert (
        _is_active_in_entire_interval(validities, YESTERDAY_START, POSITIVE_INFINITY)
        is False
    )
