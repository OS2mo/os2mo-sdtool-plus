# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from datetime import timedelta
from uuid import UUID
from uuid import uuid4
from zoneinfo import ZoneInfo

import pytest
from httpx import AsyncClient
from more_itertools import one
from starlette.status import HTTP_422_UNPROCESSABLE_ENTITY

from sdtoolplus.autogenerated_graphql_client import EmployeeCreateInput
from sdtoolplus.autogenerated_graphql_client import EngagementCreateInput
from sdtoolplus.autogenerated_graphql_client import EngagementTerminateInput
from sdtoolplus.autogenerated_graphql_client import EngagementUpdateInput
from sdtoolplus.autogenerated_graphql_client import RAValidityInput
from sdtoolplus.autogenerated_graphql_client import TestingCreateOrgUnitOrgUnitCreate
from sdtoolplus.depends import GraphQLClient
from sdtoolplus.mo.timeline import _mo_end_to_timeline_end
from sdtoolplus.mo.timeline import get_engagement_filter
from sdtoolplus.mo.timeline import get_engagement_types
from sdtoolplus.mo.timeline import timeline_interval_to_mo_validity
from sdtoolplus.models import POSITIVE_INFINITY
from sdtoolplus.models import EngType


@pytest.mark.integration_test
async def test_move_engagement(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    base_tree_builder: TestingCreateOrgUnitOrgUnitCreate,
    job_function_1234: UUID,
    job_function_5678: UUID,
):
    """
    Test this "move engagement" scenario:

    Time  --------t1--------t2---------t3------t4-----t5-----t6------------t7------->

    MO (name)     |----------------name4-------|---------------name5-----------------
    MO (key)      |----------------------- 1234 -------------|-------- 5678 ---------
    MO (unit)     |-------------dep3---|-------------------dep4----------------------
    MO (unit ID)  |-------------dep3---|-------------------dep4----------------------
    MO (ext_7)    |--------------v1----|--v2---|--v3--|--v4--|--------v5-------------
    MO (active)   |------------------------------------------------------------------
    MO (eng_type) |-------------full---|-----------------part------------------------

    "Arrange"     |---------1----------|---2---|---3--|---4--|---------5-------------
     intervals

    Trigger payload (unit)  |-------dep2------------|  <-- end at (t5 minus 2 days)

    "Assert"      |----1----|-----2----|---3---|-4--|5|--6---|----------7------------
    intervals
    """

    tz = ZoneInfo("Europe/Copenhagen")

    t1 = datetime(2001, 1, 1, tzinfo=tz)
    t2 = datetime(2002, 1, 1, tzinfo=tz)
    t3 = datetime(2003, 1, 1, tzinfo=tz)
    t4 = datetime(2004, 1, 1, tzinfo=tz)
    t5 = datetime(2005, 1, 1, tzinfo=tz)
    t5_minus_one = t5 - timedelta(days=1)
    t5_minus_two = t5 - timedelta(days=2)
    t6 = datetime(2006, 1, 1, tzinfo=tz)

    # Units
    dep2_uuid = UUID("20000000-0000-0000-0000-000000000000")
    dep3_uuid = UUID("30000000-0000-0000-0000-000000000000")
    dep4_uuid = UUID("40000000-0000-0000-0000-000000000000")

    eng_types = await get_engagement_types(graphql_client)

    # Create person
    person_uuid = uuid4()
    cpr = "0101011234"
    emp_id = "12345"
    user_key = f"II-{emp_id}"

    await graphql_client.create_person(
        EmployeeCreateInput(
            uuid=person_uuid,
            cpr_number=cpr,
            given_name="Chuck",
            surname="Norris",
        )
    )

    # Create engagement (arrange intervals 1-5)
    eng_uuid = (
        await graphql_client.create_engagement(
            EngagementCreateInput(
                user_key=user_key,
                validity=RAValidityInput(from_=t1, to=None),
                extension_1="name4",
                extension_4="dep3",
                extension_7="v1",
                person=person_uuid,
                org_unit=dep3_uuid,
                engagement_type=eng_types[EngType.MONTHLY_FULL_TIME],
                job_function=job_function_1234,
            )
        )
    ).uuid

    # Update engagement (arrange interval 2)
    await graphql_client.update_engagement(
        EngagementUpdateInput(
            uuid=eng_uuid,
            user_key=user_key,
            validity=RAValidityInput(from_=t3, to=t4),
            extension_1="name4",
            extension_4="dep4",
            extension_7="v2",
            person=person_uuid,
            org_unit=dep4_uuid,
            engagement_type=eng_types[EngType.MONTHLY_PART_TIME],
            job_function=job_function_1234,
        )
    )

    # Update engagement (arrange interval 3)
    await graphql_client.update_engagement(
        EngagementUpdateInput(
            uuid=eng_uuid,
            user_key=user_key,
            validity=RAValidityInput(from_=t4, to=t5),
            extension_1="name5",
            extension_4="dep4",
            extension_7="v3",
            person=person_uuid,
            org_unit=dep4_uuid,
            engagement_type=eng_types[EngType.MONTHLY_PART_TIME],
            job_function=job_function_1234,
        )
    )

    # Update engagement (arrange interval 4)
    await graphql_client.update_engagement(
        EngagementUpdateInput(
            uuid=eng_uuid,
            user_key=user_key,
            validity=RAValidityInput(from_=t5, to=t6),
            extension_1="name5",
            extension_4="dep4",
            extension_7="v4",
            person=person_uuid,
            org_unit=dep4_uuid,
            engagement_type=eng_types[EngType.MONTHLY_PART_TIME],
            job_function=job_function_1234,
        )
    )

    # Update engagement (arrange interval 5)
    await graphql_client.update_engagement(
        EngagementUpdateInput(
            uuid=eng_uuid,
            user_key=user_key,
            validity=RAValidityInput(from_=t6, to=None),
            extension_1="name5",
            extension_4="dep4",
            extension_7="v5",
            person=person_uuid,
            org_unit=dep4_uuid,
            engagement_type=eng_types[EngType.MONTHLY_PART_TIME],
            job_function=job_function_5678,
        )
    )

    # Act
    r = await test_client.post(
        "/minisync/move-employment",
        json={
            "institution_identifier": "II",
            "cpr": cpr,
            "employment_identifier": emp_id,
            "start": "2002-01-01",
            "end": "2004-12-30",  # <-- t5 minus 2 days
            "org_unit_uuid": str(dep2_uuid),
        },
    )

    # Assert
    assert r.status_code == 200

    updated_eng = await graphql_client.get_engagement_timeline(
        get_engagement_filter(
            person=person_uuid, user_key=user_key, from_date=None, to_date=None
        )
    )
    validities = one(updated_eng.objects).validities

    interval_1 = validities[0]
    assert interval_1.validity.from_ == t1
    assert _mo_end_to_timeline_end(interval_1.validity.to) == t2
    assert interval_1.extension_1 == "name4"
    assert interval_1.extension_4 == "dep3"
    assert interval_1.user_key == user_key
    assert interval_1.job_function_uuid == job_function_1234
    assert interval_1.extension_7 == "v1"
    assert interval_1.org_unit_uuid == dep3_uuid
    assert interval_1.engagement_type_uuid == eng_types[EngType.MONTHLY_FULL_TIME]

    interval_2 = validities[1]
    assert interval_2.validity.from_ == t2
    assert _mo_end_to_timeline_end(interval_2.validity.to) == t3
    assert interval_2.extension_1 == "name4"
    assert interval_2.extension_4 == "dep3"
    assert interval_2.user_key == user_key
    assert interval_2.job_function_uuid == job_function_1234
    assert interval_2.org_unit_uuid == dep2_uuid
    assert interval_2.extension_7 == "v1"
    assert interval_2.engagement_type_uuid == eng_types[EngType.MONTHLY_FULL_TIME]

    interval_3 = validities[2]
    assert interval_3.validity.from_ == t3
    assert _mo_end_to_timeline_end(interval_3.validity.to) == t4
    assert interval_3.extension_1 == "name4"
    assert interval_3.extension_4 == "dep4"
    assert interval_3.user_key == user_key
    assert interval_3.job_function_uuid == job_function_1234
    assert interval_3.org_unit_uuid == dep2_uuid
    assert interval_3.extension_7 == "v2"
    assert interval_3.engagement_type_uuid == eng_types[EngType.MONTHLY_PART_TIME]

    interval_4 = validities[3]
    assert interval_4.validity.from_ == t4
    assert interval_4.validity.to == t5_minus_two
    assert interval_4.extension_1 == "name5"
    assert interval_4.extension_4 == "dep4"
    assert interval_4.user_key == user_key
    assert interval_4.job_function_uuid == job_function_1234
    assert interval_4.org_unit_uuid == dep2_uuid
    assert interval_4.extension_7 == "v3"
    assert interval_4.engagement_type_uuid == eng_types[EngType.MONTHLY_PART_TIME]

    interval_5 = validities[4]
    assert interval_5.validity.from_ == t5_minus_one
    assert _mo_end_to_timeline_end(interval_5.validity.to) == t5
    assert interval_5.extension_1 == "name5"
    assert interval_5.extension_4 == "dep4"
    assert interval_5.user_key == user_key
    assert interval_5.job_function_uuid == job_function_1234
    assert interval_5.org_unit_uuid == dep4_uuid
    assert interval_5.extension_7 == "v3"
    assert interval_5.engagement_type_uuid == eng_types[EngType.MONTHLY_PART_TIME]

    interval_6 = validities[5]
    assert interval_6.validity.from_ == t5
    assert _mo_end_to_timeline_end(interval_6.validity.to) == t6
    assert interval_6.extension_1 == "name5"
    assert interval_6.extension_4 == "dep4"
    assert interval_6.user_key == user_key
    assert interval_6.job_function_uuid == job_function_1234
    assert interval_6.org_unit_uuid == dep4_uuid
    assert interval_6.extension_7 == "v4"
    assert interval_6.engagement_type_uuid == eng_types[EngType.MONTHLY_PART_TIME]

    interval_7 = validities[6]
    assert interval_7.validity.from_ == t6
    assert _mo_end_to_timeline_end(interval_7.validity.to) == POSITIVE_INFINITY
    assert interval_7.extension_1 == "name5"
    assert interval_7.extension_4 == "dep4"
    assert interval_7.user_key == user_key
    assert interval_7.job_function_uuid == job_function_5678
    assert interval_7.org_unit_uuid == dep4_uuid
    assert interval_7.extension_7 == "v5"
    assert interval_7.engagement_type_uuid == eng_types[EngType.MONTHLY_PART_TIME]

    assert len(validities) == 7


@pytest.mark.integration_test
async def test_move_engagement_to_infinity(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    base_tree_builder: TestingCreateOrgUnitOrgUnitCreate,
    job_function_1234: UUID,
    job_function_5678: UUID,
):
    """
    Test this "move engagement" scenario:

    Time  --------t1--------t2---------t3------t4-----t5-----t6--------------------->

    MO (name)     |----------------name4-------|---------------name5-----------------
    MO (key)      |----------------------- 1234 -------------|-------- 5678 ---------
    MO (unit)     |-------------dep3---|-------------------dep4----------------------
    MO (unit ID)  |-------------dep3---|-------------------dep4----------------------
    MO (ext_7)    |--------------v1----|--v2---|--v3--|--v4--|--------v5-------------
    MO (active)   |------------------------------------------------------------------
    MO (eng_type) |-------------full---|-----------------part------------------------

    "Arrange"     |---------1----------|---2---|---3--|---4--|---------5-------------
     intervals

    Trigger payload (unit)  |------------------------dep2----------------------------

    "Assert"      |----1----|-----2----|---3---|--4---|---5--|----------6------------
    intervals
    """

    tz = ZoneInfo("Europe/Copenhagen")

    t1 = datetime(2001, 1, 1, tzinfo=tz)
    t2 = datetime(2002, 1, 1, tzinfo=tz)
    t3 = datetime(2003, 1, 1, tzinfo=tz)
    t4 = datetime(2004, 1, 1, tzinfo=tz)
    t5 = datetime(2005, 1, 1, tzinfo=tz)
    t6 = datetime(2006, 1, 1, tzinfo=tz)

    # Units
    dep2_uuid = UUID("20000000-0000-0000-0000-000000000000")
    dep3_uuid = UUID("30000000-0000-0000-0000-000000000000")
    dep4_uuid = UUID("40000000-0000-0000-0000-000000000000")

    eng_types = await get_engagement_types(graphql_client)

    # Create person
    person_uuid = uuid4()
    cpr = "0101011234"
    emp_id = "12345"
    user_key = f"II-{emp_id}"

    await graphql_client.create_person(
        EmployeeCreateInput(
            uuid=person_uuid,
            cpr_number=cpr,
            given_name="Chuck",
            surname="Norris",
        )
    )

    # Create engagement (arrange intervals 1-5)
    eng_uuid = (
        await graphql_client.create_engagement(
            EngagementCreateInput(
                user_key=user_key,
                validity=RAValidityInput(from_=t1, to=None),
                extension_1="name4",
                extension_4="dep3",
                extension_7="v1",
                person=person_uuid,
                org_unit=dep3_uuid,
                engagement_type=eng_types[EngType.MONTHLY_FULL_TIME],
                job_function=job_function_1234,
            )
        )
    ).uuid

    # Update engagement (arrange interval 2)
    await graphql_client.update_engagement(
        EngagementUpdateInput(
            uuid=eng_uuid,
            user_key=user_key,
            validity=RAValidityInput(from_=t3, to=t4),
            extension_1="name4",
            extension_4="dep4",
            extension_7="v2",
            person=person_uuid,
            org_unit=dep4_uuid,
            engagement_type=eng_types[EngType.MONTHLY_PART_TIME],
            job_function=job_function_1234,
        )
    )

    # Update engagement (arrange interval 3)
    await graphql_client.update_engagement(
        EngagementUpdateInput(
            uuid=eng_uuid,
            user_key=user_key,
            validity=RAValidityInput(from_=t4, to=t5),
            extension_1="name5",
            extension_4="dep4",
            extension_7="v3",
            person=person_uuid,
            org_unit=dep4_uuid,
            engagement_type=eng_types[EngType.MONTHLY_PART_TIME],
            job_function=job_function_1234,
        )
    )

    # Update engagement (arrange interval 4)
    await graphql_client.update_engagement(
        EngagementUpdateInput(
            uuid=eng_uuid,
            user_key=user_key,
            validity=RAValidityInput(from_=t5, to=t6),
            extension_1="name5",
            extension_4="dep4",
            extension_7="v4",
            person=person_uuid,
            org_unit=dep4_uuid,
            engagement_type=eng_types[EngType.MONTHLY_PART_TIME],
            job_function=job_function_1234,
        )
    )

    # Update engagement (arrange interval 5)
    await graphql_client.update_engagement(
        EngagementUpdateInput(
            uuid=eng_uuid,
            user_key=user_key,
            validity=RAValidityInput(from_=t6, to=None),
            extension_1="name5",
            extension_4="dep4",
            extension_7="v5",
            person=person_uuid,
            org_unit=dep4_uuid,
            engagement_type=eng_types[EngType.MONTHLY_PART_TIME],
            job_function=job_function_5678,
        )
    )

    # Act
    r = await test_client.post(
        "/minisync/move-employment",
        json={
            "institution_identifier": "II",
            "cpr": cpr,
            "employment_identifier": emp_id,
            "start": "2002-01-01",
            "end": "9999-12-31",
            "org_unit_uuid": str(dep2_uuid),
        },
    )

    # Assert
    assert r.status_code == 200

    updated_eng = await graphql_client.get_engagement_timeline(
        get_engagement_filter(
            person=person_uuid, user_key=user_key, from_date=None, to_date=None
        )
    )
    validities = one(updated_eng.objects).validities

    interval_1 = validities[0]
    assert interval_1.validity.from_ == t1
    assert _mo_end_to_timeline_end(interval_1.validity.to) == t2
    assert interval_1.extension_1 == "name4"
    assert interval_1.extension_4 == "dep3"
    assert interval_1.user_key == user_key
    assert interval_1.job_function_uuid == job_function_1234
    assert interval_1.extension_7 == "v1"
    assert interval_1.org_unit_uuid == dep3_uuid
    assert interval_1.engagement_type_uuid == eng_types[EngType.MONTHLY_FULL_TIME]

    interval_2 = validities[1]
    assert interval_2.validity.from_ == t2
    assert _mo_end_to_timeline_end(interval_2.validity.to) == t3
    assert interval_2.extension_1 == "name4"
    assert interval_2.extension_4 == "dep3"
    assert interval_2.user_key == user_key
    assert interval_2.job_function_uuid == job_function_1234
    assert interval_2.org_unit_uuid == dep2_uuid
    assert interval_2.extension_7 == "v1"
    assert interval_2.engagement_type_uuid == eng_types[EngType.MONTHLY_FULL_TIME]

    interval_3 = validities[2]
    assert interval_3.validity.from_ == t3
    assert _mo_end_to_timeline_end(interval_3.validity.to) == t4
    assert interval_3.extension_1 == "name4"
    assert interval_3.extension_4 == "dep4"
    assert interval_3.user_key == user_key
    assert interval_3.job_function_uuid == job_function_1234
    assert interval_3.org_unit_uuid == dep2_uuid
    assert interval_3.extension_7 == "v2"
    assert interval_3.engagement_type_uuid == eng_types[EngType.MONTHLY_PART_TIME]

    interval_4 = validities[3]
    assert interval_4.validity.from_ == t4
    assert _mo_end_to_timeline_end(interval_4.validity.to) == t5
    assert interval_4.extension_1 == "name5"
    assert interval_4.extension_4 == "dep4"
    assert interval_4.user_key == user_key
    assert interval_4.job_function_uuid == job_function_1234
    assert interval_4.org_unit_uuid == dep2_uuid
    assert interval_4.extension_7 == "v3"
    assert interval_4.engagement_type_uuid == eng_types[EngType.MONTHLY_PART_TIME]

    interval_5 = validities[4]
    assert interval_5.validity.from_ == t5
    assert _mo_end_to_timeline_end(interval_5.validity.to) == t6
    assert interval_5.extension_1 == "name5"
    assert interval_5.extension_4 == "dep4"
    assert interval_5.user_key == user_key
    assert interval_5.job_function_uuid == job_function_1234
    assert interval_5.org_unit_uuid == dep2_uuid
    assert interval_5.extension_7 == "v4"
    assert interval_5.engagement_type_uuid == eng_types[EngType.MONTHLY_PART_TIME]

    interval_6 = validities[5]
    assert interval_6.validity.from_ == t6
    assert _mo_end_to_timeline_end(interval_6.validity.to) == POSITIVE_INFINITY
    assert interval_6.extension_1 == "name5"
    assert interval_6.extension_4 == "dep4"
    assert interval_6.user_key == user_key
    assert interval_6.job_function_uuid == job_function_5678
    assert interval_6.org_unit_uuid == dep2_uuid
    assert interval_6.extension_7 == "v5"
    assert interval_6.engagement_type_uuid == eng_types[EngType.MONTHLY_PART_TIME]

    assert len(validities) == 6


@pytest.mark.integration_test
async def test_move_engagement_where_engagement_not_active_in_entire_period(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    base_tree_builder: TestingCreateOrgUnitOrgUnitCreate,
    job_function_1234: UUID,
    job_function_5678: UUID,
):
    """
    Test this "move engagement" scenario:

    Time  --------t1--------t2---------t3------t4----------------------------------->

    MO (name)     |----------------------------name4---------------------------------
    MO (key)      |--------------------------- 1234 ---------------------------------
    MO (unit)     |----------------------------dep3----------------------------------
    MO (unit ID)  |----------------------------dep3----------------------------------
    MO (active)   |--------------------|       |-------------------------------------
    MO (eng_type) |---------------------------full-----------------------------------

    "Arrange"     |---------1----------|---2---|------------------3------------------
     intervals

    Trigger payload (unit)  |------------------------dep2----------------------------

    Expected: HTTP 500 due to EngagementNotActiveError
    """

    tz = ZoneInfo("Europe/Copenhagen")

    t1 = datetime(2001, 1, 1, tzinfo=tz)
    t3 = datetime(2003, 1, 1, tzinfo=tz)
    t4 = datetime(2004, 1, 1, tzinfo=tz)

    # Units
    dep2_uuid = UUID("20000000-0000-0000-0000-000000000000")
    dep3_uuid = UUID("30000000-0000-0000-0000-000000000000")

    eng_types = await get_engagement_types(graphql_client)

    # Create person
    person_uuid = uuid4()
    cpr = "0101011234"
    emp_id = "12345"
    user_key = f"II-{emp_id}"

    await graphql_client.create_person(
        EmployeeCreateInput(
            uuid=person_uuid,
            cpr_number=cpr,
            given_name="Chuck",
            surname="Norris",
        )
    )

    # Create engagement (arrange intervals 1-3)
    eng_uuid = (
        await graphql_client.create_engagement(
            EngagementCreateInput(
                user_key=user_key,
                validity=RAValidityInput(from_=t1, to=None),
                extension_1="name4",
                extension_4="dep3",
                person=person_uuid,
                org_unit=dep3_uuid,
                engagement_type=eng_types[EngType.MONTHLY_FULL_TIME],
                job_function=job_function_1234,
            )
        )
    ).uuid

    # Terminate engagement (arrange interval 2)
    term_validity = timeline_interval_to_mo_validity(start=t3, end=t4)
    await graphql_client.terminate_engagement(
        EngagementTerminateInput(
            uuid=eng_uuid, from_=term_validity.from_, to=term_validity.to
        )
    )

    # Act
    r = await test_client.post(
        "/minisync/move-employment",
        json={
            "institution_identifier": "II",
            "cpr": cpr,
            "employment_identifier": emp_id,
            "start": "2002-01-01",
            "end": "9999-12-31",
            "org_unit_uuid": str(dep2_uuid),
        },
    )

    # Assert
    assert r.status_code == HTTP_422_UNPROCESSABLE_ENTITY


@pytest.mark.integration_test
async def test_move_engagement_only_valid_for_a_day(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    base_tree_builder: TestingCreateOrgUnitOrgUnitCreate,
    job_function_1234: UUID,
):
    """
    Test this "move engagement" scenario, i.e. the engagement is only valid for a single
    day (t1):

    Time  -------------------------t1--------t1+1------------------------------------->

    MO (name)                      |--name4--|
    MO (key)                       |--1234---|
    MO (unit)                      |--dep3---|
    MO (unit ID)                   |--dep3---|
    MO (active)                    |---------|
    MO (eng_type)                  |--full---|

    "Arrange"                      |----1----|
     intervals

    Trigger payload (unit)         |--dep2---|

    "Assert"                       |----1----|
    intervals
    """

    tz = ZoneInfo("Europe/Copenhagen")

    t1 = datetime(2001, 1, 1, tzinfo=tz)
    t1_plus_one = t1 + timedelta(days=1)

    # Units
    dep2_uuid = UUID("20000000-0000-0000-0000-000000000000")
    dep3_uuid = UUID("30000000-0000-0000-0000-000000000000")

    eng_types = await get_engagement_types(graphql_client)

    # Create person
    person_uuid = uuid4()
    cpr = "0101011234"
    emp_id = "12345"
    user_key = f"II-{emp_id}"

    await graphql_client.create_person(
        EmployeeCreateInput(
            uuid=person_uuid,
            cpr_number=cpr,
            given_name="Chuck",
            surname="Norris",
        )
    )

    # Create engagement (arrange intervals 1)
    await graphql_client.create_engagement(
        EngagementCreateInput(
            user_key=user_key,
            validity=timeline_interval_to_mo_validity(t1, t1_plus_one),
            extension_1="name4",
            extension_4="dep3",
            person=person_uuid,
            org_unit=dep3_uuid,
            engagement_type=eng_types[EngType.MONTHLY_FULL_TIME],
            job_function=job_function_1234,
        )
    )

    # Act
    r = await test_client.post(
        "/minisync/move-employment",
        json={
            "institution_identifier": "II",
            "cpr": cpr,
            "employment_identifier": emp_id,
            "start": "2001-01-01",
            "end": "2001-01-01",
            "org_unit_uuid": str(dep2_uuid),
        },
    )

    # Assert
    assert r.status_code == 200

    updated_eng = await graphql_client.get_engagement_timeline(
        get_engagement_filter(
            person=person_uuid, user_key=user_key, from_date=None, to_date=None
        )
    )
    validities = one(updated_eng.objects).validities

    interval_1 = one(validities)
    assert interval_1.validity.from_ == t1
    assert _mo_end_to_timeline_end(interval_1.validity.to) == t1_plus_one
    assert interval_1.extension_1 == "name4"
    assert interval_1.extension_4 == "dep3"
    assert interval_1.user_key == user_key
    assert interval_1.job_function_uuid == job_function_1234
    assert interval_1.org_unit_uuid == dep2_uuid
    assert interval_1.engagement_type_uuid == eng_types[EngType.MONTHLY_FULL_TIME]
