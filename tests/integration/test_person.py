# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from uuid import UUID
from uuid import uuid4

import pytest
from httpx import AsyncClient
from more_itertools import one
from respx import MockRouter

from sdtoolplus.autogenerated_graphql_client import EmployeeCreateInput
from sdtoolplus.depends import GraphQLClient


@pytest.mark.integration_test
async def test_person_timeline_create_new(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    respx_mock: MockRouter,
):
    """
    We are testing this scenario:
    A person exists in MO but with the wrong name. Test that the name is updated in MO


    MO (givenname)
    SD (givenname)              |-----------------Chuck---------------------------------------------

    "Assert"         |----1----|                         |--2---|
    intervals
    """
    # Arrange

    # Create person
    cpr = "0101011234"
    emp_id = "12345"

    # Ensure the person doesn't exist yet
    mo_person_before = await graphql_client.get_person(cpr=cpr)

    assert mo_person_before.objects == []

    sd_resp = f"""<?xml version="1.0" encoding="UTF-8" ?>
       <GetPerson20111201 creationDateTime="2025-04-09T09:47:55">
           <RequestStructure>
               <InstitutionIdentifier>II</InstitutionIdentifier>
               <PersonCivilRegistrationIdentifier>{cpr}</PersonCivilRegistrationIdentifier>
               <EffectiveDate>2025-04-09</EffectiveDate>
               <StatusActiveIndicator>true</StatusActiveIndicator>
               <StatusPassiveIndicator>false</StatusPassiveIndicator>
               <ContactInformationIndicator>false</ContactInformationIndicator>
               <PostalAddressIndicator>false</PostalAddressIndicator>
           </RequestStructure>
           <Person>
               <PersonCivilRegistrationIdentifier>0101011234</PersonCivilRegistrationIdentifier>
               <PersonGivenName>Chuck</PersonGivenName>
               <PersonSurnameName>Norris</PersonSurnameName>
               <Employment>
                   <EmploymentIdentifier>{emp_id}</EmploymentIdentifier>
               </Employment>
           </Person>
       </GetPerson20111201>
    """

    respx_mock.get(
        "https://service.sd.dk/sdws/GetPerson20111201?InstitutionIdentifier=II&EffectiveDate=09.04.2025&PersonCivilRegistrationIdentifier=0101011234&StatusActiveIndicator=True&StatusPassiveIndicator=False&ContactInformationIndicator=False&PostalAddressIndicator=False"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content=sd_resp,
    )

    # Act
    r = await test_client.post(
        "/timeline/sync/person",
        json={
            "institution_identifier": "II",
            "cpr": cpr,
        },
    )

    # Assert
    assert r.status_code == 200
    mo_person = await graphql_client.get_person(cpr=cpr)
    assert isinstance(one(mo_person.objects).uuid, UUID)


@pytest.mark.integration_test
async def test_person_timeline_update(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    respx_mock: MockRouter,
):
    """
    We are testing this scenario:
    A person exists in MO but with the wrong name. Test that the name is updated in MO.


    MO (givenname)   |-------------------Buck----------------------
    SD (givenname)              |-----------------Chuck---------------------------------------------

    "Assert"         |----1----|                         |--2---|
    intervals
    """
    # Arrange

    # Create person
    person_uuid = uuid4()
    cpr = "0101011234"
    emp_id = "12345"

    mo_person = await graphql_client.create_person(
        EmployeeCreateInput(
            uuid=person_uuid,
            cpr_number=cpr,
            given_name="Buck",
            surname="Norris",
        )
    )

    # await asyncio.sleep(300)

    sd_resp = f"""<?xml version="1.0" encoding="UTF-8" ?>
       <GetPerson20111201 creationDateTime="2025-04-09T09:47:55">
           <RequestStructure>
               <InstitutionIdentifier>II</InstitutionIdentifier>
               <PersonCivilRegistrationIdentifier>0101011234</PersonCivilRegistrationIdentifier>
               <EffectiveDate>2025-04-09</EffectiveDate>
               <StatusActiveIndicator>true</StatusActiveIndicator>
               <StatusPassiveIndicator>false</StatusPassiveIndicator>
               <ContactInformationIndicator>false</ContactInformationIndicator>
               <PostalAddressIndicator>false</PostalAddressIndicator>
           </RequestStructure>
           <Person>
               <PersonCivilRegistrationIdentifier>0101011234</PersonCivilRegistrationIdentifier>
               <PersonGivenName>Chuck</PersonGivenName>
               <PersonSurnameName>Norris</PersonSurnameName>
               <Employment>
                   <EmploymentIdentifier>{emp_id}</EmploymentIdentifier>
               </Employment>
           </Person>
       </GetPerson20111201>
    """

    respx_mock.get(
        "https://service.sd.dk/sdws/GetPerson20111201?InstitutionIdentifier=II&EffectiveDate=09.04.2025&PersonCivilRegistrationIdentifier=0101011234&StatusActiveIndicator=True&StatusPassiveIndicator=False&ContactInformationIndicator=False&PostalAddressIndicator=False"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content=sd_resp,
    )

    # Act
    r = await test_client.post(
        "/timeline/sync/person",
        json={
            "institution_identifier": "II",
            "cpr": cpr,
        },
    )

    # Assert
    assert r.status_code == 200
    mo_timeline = await graphql_client.get_person_timeline(mo_person.uuid)
    validities = one(mo_timeline.objects).validities

    assert len(validities) == 2

    assert validities[0].given_name == "Buck"
    assert validities[1].given_name == "Chuck"
