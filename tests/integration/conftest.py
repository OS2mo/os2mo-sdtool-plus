# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
import uuid
from datetime import date
from datetime import datetime
from typing import AsyncIterator
from uuid import UUID
from uuid import uuid4
from zoneinfo import ZoneInfo

import pytest
from fastapi import FastAPI
from httpx import AsyncClient
from more_itertools import one
from pytest import MonkeyPatch
from sdclient.responses import GetDepartmentResponse
from sdclient.responses import GetOrganizationResponse
from sqlalchemy import Engine
from sqlalchemy import create_engine

from sdtoolplus.autogenerated_graphql_client import ClassFilter
from sdtoolplus.autogenerated_graphql_client import FacetFilter
from sdtoolplus.autogenerated_graphql_client import GraphQLClient
from sdtoolplus.autogenerated_graphql_client import TestingCreateOrgUnitOrgUnitCreate
from sdtoolplus.db.models import Base
from sdtoolplus.main import create_app
from sdtoolplus.mo_org_unit_importer import OrgUnitLevelUUID
from sdtoolplus.mo_org_unit_importer import OrgUnitTypeUUID
from sdtoolplus.mo_org_unit_importer import OrgUnitUUID
from tests.conftest import SharedIdentifier

UNKNOWN_UNIT = OrgUnitUUID("44c15403-2a66-429e-8893-acaae9f30dfb")


@pytest.fixture
async def app(monkeypatch: MonkeyPatch) -> FastAPI:
    app = create_app()
    return app


@pytest.fixture
async def graphql_client(mo_client: AsyncClient) -> AsyncIterator[GraphQLClient]:
    """Authenticated GraphQL codegen client for OS2mo."""
    graphql_client = GraphQLClient(
        url=f"{mo_client.base_url}/graphql/v25",
        http_client=mo_client,
    )
    async with graphql_client as client:
        yield client


@pytest.fixture
def sqlite_engine() -> Engine:
    engine = create_engine("sqlite:///:memory:")
    Base.metadata.create_all(engine)
    return engine


@pytest.fixture
async def org_unit_type(graphql_client: GraphQLClient) -> uuid.UUID:
    r_org_unit_types = await graphql_client.get_class(
        ClassFilter(facet=FacetFilter(user_keys=["org_unit_type"]), user_keys=["Enhed"])
    )
    org_unit_type = one(r_org_unit_types.objects).current.uuid  # type: ignore
    return org_unit_type


@pytest.fixture
async def org_unit_levels(graphql_client: GraphQLClient) -> dict[str, OrgUnitLevelUUID]:
    org_unit_levels = dict()
    # Careful now - too much logic in the test code!!
    for org_unit_level in [
        "Afdelings-niveau",
        "NY0-niveau",
        "NY1-niveau",
        "non-SD",
        "TOP",
    ]:
        r_org_unit_level = await graphql_client.get_class(
            ClassFilter(
                facet=FacetFilter(user_keys=["org_unit_level"]),
                user_keys=[org_unit_level],
            )
        )
        org_unit_levels[org_unit_level] = one(r_org_unit_level.objects).current.uuid  # type: ignore

    return org_unit_levels


@pytest.fixture
async def base_tree_builder(
    graphql_client: GraphQLClient,
    org_unit_type: OrgUnitTypeUUID,
    org_unit_levels: dict[str, OrgUnitLevelUUID],
) -> TestingCreateOrgUnitOrgUnitCreate:
    """
    Build this MO tree:

    <OrgUnitNode: <root> (12121212-1212-1212-1212-121212121212)>
    └── <OrgUnitNode: Department 1 (10000000-0000-0000-0000-000000000000)>
        ├── <OrgUnitNode: Department 2 (20000000-0000-0000-0000-000000000000)>
        │   ├── <OrgUnitNode: Department 3 (30000000-0000-0000-0000-000000000000)>
        │   └── <OrgUnitNode: Department 4 (40000000-0000-0000-0000-000000000000)>
        └── <OrgUnitNode: Department 5 (50000000-0000-0000-0000-000000000000)>
            └── <OrgUnitNode: Department 6 (60000000-0000-0000-0000-000000000000)>

    """
    now = datetime(1999, 1, 1, tzinfo=ZoneInfo("Europe/Copenhagen"))

    # Build basic MO tree

    root = await graphql_client._testing__create_org_unit(
        uuid=uuid.UUID("12121212-1212-1212-1212-121212121212"),
        name="Root",
        user_key="root",
        org_unit_type=org_unit_type,
        from_date=now,
    )

    dep1 = await graphql_client._testing__create_org_unit(
        uuid.UUID("10000000-0000-0000-0000-000000000000"),
        name="Department 1",
        user_key="dep1",
        org_unit_type=org_unit_type,
        org_unit_level=org_unit_levels["NY1-niveau"],
        from_date=now,
        parent=root.uuid,
    )

    dep2 = await graphql_client._testing__create_org_unit(
        uuid.UUID("20000000-0000-0000-0000-000000000000"),
        name="Department 2",
        user_key="dep2",
        org_unit_type=org_unit_type,
        org_unit_level=org_unit_levels["NY0-niveau"],
        from_date=now,
        parent=dep1.uuid,
    )

    await graphql_client._testing__create_org_unit(
        uuid.UUID("30000000-0000-0000-0000-000000000000"),
        name="Department 3",
        user_key="dep3",
        org_unit_type=org_unit_type,
        org_unit_level=org_unit_levels["Afdelings-niveau"],
        from_date=now,
        parent=dep2.uuid,
    )

    await graphql_client._testing__create_org_unit(
        uuid.UUID("40000000-0000-0000-0000-000000000000"),
        name="Department 4",
        user_key="dep4",
        org_unit_type=org_unit_type,
        org_unit_level=org_unit_levels["Afdelings-niveau"],
        from_date=now,
        parent=dep2.uuid,
    )

    dep5 = await graphql_client._testing__create_org_unit(
        uuid.UUID("50000000-0000-0000-0000-000000000000"),
        name="Department 5",
        user_key="dep5",
        org_unit_type=org_unit_type,
        org_unit_level=org_unit_levels["NY0-niveau"],
        from_date=now,
        parent=dep1.uuid,
    )

    await graphql_client._testing__create_org_unit(
        uuid.UUID("60000000-0000-0000-0000-000000000000"),
        name="Department 6",
        user_key="dep6",
        org_unit_type=org_unit_type,
        org_unit_level=org_unit_levels["NY1-niveau"],
        from_date=now,
        parent=dep5.uuid,
    )

    # Also build the unit "Ukendt" needed in the case where MODE is "region"
    await graphql_client._testing__create_org_unit(
        uuid=UNKNOWN_UNIT,
        name="Ukendt",
        user_key="ukendt",
        org_unit_type=org_unit_type,
        from_date=now,
    )

    # ... and also build an "administrative organization"
    await graphql_client._testing__create_org_unit(
        uuid=uuid.UUID("649dd6ee-becc-4c0e-ad5e-7a7a6aea37fb"),
        name="Administrative org",
        user_key="adm",
        org_unit_type=org_unit_type,
        from_date=now,
    )

    await graphql_client._testing__create_org_unit(
        uuid=uuid.UUID("aaaaaaaa-2a66-429e-8893-aaaaaaaaaaaa"),
        name="A",
        user_key="a",
        org_unit_type=org_unit_type,
        from_date=now,
        parent=uuid.UUID("649dd6ee-becc-4c0e-ad5e-7a7a6aea37fb"),
    )

    await graphql_client._testing__create_org_unit(
        uuid=uuid.UUID("bbbbbbbb-2a66-429e-8893-bbbbbbbbbbbb"),
        name="B",
        user_key="b",
        org_unit_type=org_unit_type,
        from_date=now,
        parent=uuid.UUID("649dd6ee-becc-4c0e-ad5e-7a7a6aea37fb"),
    )

    await graphql_client._testing__create_org_unit(
        uuid=uuid.UUID("cccccccc-2a66-429e-8893-cccccccccccc"),
        name="C",
        user_key="c",
        org_unit_type=org_unit_type,
        from_date=now,
        parent=uuid.UUID("649dd6ee-becc-4c0e-ad5e-7a7a6aea37fb"),
    )

    await graphql_client._testing__create_org_unit(
        uuid=uuid.UUID("dddddddd-2a66-429e-8893-dddddddddddd"),
        name="D",
        user_key="d",
        org_unit_type=org_unit_type,
        from_date=now,
        parent=uuid.UUID("649dd6ee-becc-4c0e-ad5e-7a7a6aea37fb"),
    )

    await graphql_client._testing__create_org_unit(
        uuid=uuid.UUID("eeeeeeee-2a66-429e-8893-eeeeeeeeeeee"),
        name="E",
        user_key="e",
        org_unit_type=org_unit_type,
        from_date=now,
        parent=uuid.UUID("649dd6ee-becc-4c0e-ad5e-7a7a6aea37fb"),
    )

    return root


@pytest.fixture
async def obsolete_unit_tree_builder(
    graphql_client: GraphQLClient, base_tree_builder: TestingCreateOrgUnitOrgUnitCreate
):
    r_org_unit_types = await graphql_client.get_class(
        ClassFilter(facet=FacetFilter(user_keys=["org_unit_type"]), user_keys=["Enhed"])
    )
    org_unit_type = one(r_org_unit_types.objects).current.uuid  # type: ignore

    now = datetime(1999, 1, 1, tzinfo=ZoneInfo("Europe/Copenhagen"))

    # Build MO tree with a unit for "Udgåede afdelinger"

    await graphql_client._testing__create_org_unit(
        uuid=uuid.UUID("cccccccc-cccc-cccc-cccc-cccccccccccc"),
        name="Udgåede afdelinger",
        user_key="udgåede afdelinger",
        org_unit_type=org_unit_type,
        from_date=now,
        parent=base_tree_builder.uuid,
    )


@pytest.fixture
def sd_get_org_with_2_in_obsolete() -> GetOrganizationResponse:
    sd_org_json = {
        "RegionIdentifier": "RI",
        "InstitutionIdentifier": "II",
        "InstitutionUUIDIdentifier": str(SharedIdentifier.root_org_uuid),
        "DepartmentStructureName": "Dep structure name",
        "OrganizationStructure": {
            "DepartmentLevelIdentifier": "Afdelings-niveau",
            "DepartmentLevelReference": {
                "DepartmentLevelIdentifier": "NY0-niveau",
                "DepartmentLevelReference": {"DepartmentLevelIdentifier": "NY1-niveau"},
            },
        },
        "Organization": [
            {
                "ActivationDate": "1999-01-01",
                "DeactivationDate": "9999-12-31",
                "DepartmentReference": [
                    {
                        "DepartmentIdentifier": "Afd",
                        "DepartmentUUIDIdentifier": "30000000-0000-0000-0000-000000000000",
                        "DepartmentLevelIdentifier": "Afdelings-niveau",
                        "DepartmentReference": [
                            {
                                "DepartmentIdentifier": "NY0",
                                "DepartmentUUIDIdentifier": "20000000-0000-0000-0000-000000000000",
                                "DepartmentLevelIdentifier": "NY0-niveau",
                                "DepartmentReference": [
                                    {
                                        "DepartmentIdentifier": "NY1",
                                        "DepartmentUUIDIdentifier": "cccccccc-cccc-cccc-cccc-cccccccccccc",
                                        "DepartmentLevelIdentifier": "NY1-niveau",
                                    }
                                ],
                            }
                        ],
                    },
                    {
                        "DepartmentIdentifier": "Afd",
                        "DepartmentUUIDIdentifier": "40000000-0000-0000-0000-000000000000",
                        "DepartmentLevelIdentifier": "Afdelings-niveau",
                        "DepartmentReference": [
                            {
                                "DepartmentIdentifier": "NY0",
                                "DepartmentUUIDIdentifier": "20000000-0000-0000-0000-000000000000",
                                "DepartmentLevelIdentifier": "NY0-niveau",
                                "DepartmentReference": [
                                    {
                                        "DepartmentIdentifier": "NY1",
                                        "DepartmentUUIDIdentifier": "cccccccc-cccc-cccc-cccc-cccccccccccc",
                                        "DepartmentLevelIdentifier": "NY1-niveau",
                                    }
                                ],
                            }
                        ],
                    },
                    {
                        "DepartmentIdentifier": "Afd",
                        "DepartmentUUIDIdentifier": "60000000-0000-0000-0000-000000000000",
                        "DepartmentLevelIdentifier": "Afdelings-niveau",
                        "DepartmentReference": [
                            {
                                "DepartmentIdentifier": "NY0",
                                "DepartmentUUIDIdentifier": "50000000-0000-0000-0000-000000000000",
                                "DepartmentLevelIdentifier": "NY0-niveau",
                                "DepartmentReference": [
                                    {
                                        "DepartmentIdentifier": "NY1",
                                        "DepartmentUUIDIdentifier": "10000000-0000-0000-0000-000000000000",
                                        "DepartmentLevelIdentifier": "NY1-niveau",
                                    }
                                ],
                            }
                        ],
                    },
                ],
            }
        ],
    }
    sd_org = GetOrganizationResponse.parse_obj(sd_org_json)
    return sd_org


@pytest.fixture
def sd_get_org_with_3_in_obsolete() -> GetOrganizationResponse:
    sd_org_json = {
        "RegionIdentifier": "RI",
        "InstitutionIdentifier": "II",
        "InstitutionUUIDIdentifier": str(SharedIdentifier.root_org_uuid),
        "DepartmentStructureName": "Dep structure name",
        "OrganizationStructure": {
            "DepartmentLevelIdentifier": "Afdelings-niveau",
            "DepartmentLevelReference": {
                "DepartmentLevelIdentifier": "NY0-niveau",
                "DepartmentLevelReference": {"DepartmentLevelIdentifier": "NY1-niveau"},
            },
        },
        "Organization": [
            {
                "ActivationDate": "1999-01-01",
                "DeactivationDate": "9999-12-31",
                "DepartmentReference": [
                    {
                        "DepartmentIdentifier": "Afd",
                        "DepartmentUUIDIdentifier": "30000000-0000-0000-0000-000000000000",
                        "DepartmentLevelIdentifier": "Afdelings-niveau",
                        "DepartmentReference": [
                            {
                                "DepartmentIdentifier": "NY1",
                                "DepartmentUUIDIdentifier": "cccccccc-cccc-cccc-cccc-cccccccccccc",
                                "DepartmentLevelIdentifier": "NY1-niveau",
                            }
                        ],
                    },
                    {
                        "DepartmentIdentifier": "Afd",
                        "DepartmentUUIDIdentifier": "40000000-0000-0000-0000-000000000000",
                        "DepartmentLevelIdentifier": "Afdelings-niveau",
                        "DepartmentReference": [
                            {
                                "DepartmentIdentifier": "NY0",
                                "DepartmentUUIDIdentifier": "20000000-0000-0000-0000-000000000000",
                                "DepartmentLevelIdentifier": "NY0-niveau",
                                "DepartmentReference": [
                                    {
                                        "DepartmentIdentifier": "NY1",
                                        "DepartmentUUIDIdentifier": "10000000-0000-0000-0000-000000000000",
                                        "DepartmentLevelIdentifier": "NY1-niveau",
                                    }
                                ],
                            }
                        ],
                    },
                    {
                        "DepartmentIdentifier": "Afd",
                        "DepartmentUUIDIdentifier": "60000000-0000-0000-0000-000000000000",
                        "DepartmentLevelIdentifier": "Afdelings-niveau",
                        "DepartmentReference": [
                            {
                                "DepartmentIdentifier": "NY0",
                                "DepartmentUUIDIdentifier": "50000000-0000-0000-0000-000000000000",
                                "DepartmentLevelIdentifier": "NY0-niveau",
                                "DepartmentReference": [
                                    {
                                        "DepartmentIdentifier": "NY1",
                                        "DepartmentUUIDIdentifier": "10000000-0000-0000-0000-000000000000",
                                        "DepartmentLevelIdentifier": "NY1-niveau",
                                    }
                                ],
                            }
                        ],
                    },
                ],
            }
        ],
    }
    sd_org = GetOrganizationResponse.parse_obj(sd_org_json)
    return sd_org


@pytest.fixture
def sd_get_dep_with_obsolete() -> GetDepartmentResponse:
    sd_departments_json = {
        "RegionIdentifier": "RI",
        "InstitutionIdentifier": "II",
        "Department": [
            {
                "ActivationDate": "1999-01-01",
                "DeactivationDate": "9999-12-31",
                "DepartmentIdentifier": "dep1",
                "DepartmentLevelIdentifier": "NY1-niveau",
                "DepartmentName": "Department 1",
                "DepartmentUUIDIdentifier": "10000000-0000-0000-0000-000000000000",
            },
            {
                "ActivationDate": "1999-01-01",
                "DeactivationDate": "9999-12-31",
                "DepartmentIdentifier": "dep2",
                "DepartmentLevelIdentifier": "NY0-niveau",
                "DepartmentName": "Department 2",
                "DepartmentUUIDIdentifier": "20000000-0000-0000-0000-000000000000",
            },
            {
                "ActivationDate": "1999-01-01",
                "DeactivationDate": "9999-12-31",
                "DepartmentIdentifier": "dep3",
                "DepartmentLevelIdentifier": "Afdelings-niveau",
                "DepartmentName": "Department 3",
                "DepartmentUUIDIdentifier": "30000000-0000-0000-0000-000000000000",
            },
            {
                "ActivationDate": "1999-01-01",
                "DeactivationDate": "9999-12-31",
                "DepartmentIdentifier": "dep4",
                "DepartmentLevelIdentifier": "Afdelings-niveau",
                "DepartmentName": "Department 4",
                "DepartmentUUIDIdentifier": "40000000-0000-0000-0000-000000000000",
            },
            {
                "ActivationDate": "1999-01-01",
                "DeactivationDate": "9999-12-31",
                "DepartmentIdentifier": "dep5",
                "DepartmentLevelIdentifier": "NY0-niveau",
                "DepartmentName": "Department 5",
                "DepartmentUUIDIdentifier": "50000000-0000-0000-0000-000000000000",
            },
            {
                "ActivationDate": "1999-01-01",
                "DeactivationDate": "9999-12-31",
                "DepartmentIdentifier": "dep6",
                "DepartmentLevelIdentifier": "Afdelings-niveau",
                "DepartmentName": "Department 6",
                "DepartmentUUIDIdentifier": "60000000-0000-0000-0000-000000000000",
            },
            {
                "ActivationDate": "1999-01-01",
                "DeactivationDate": "9999-12-31",
                "DepartmentIdentifier": "udgåede afdelinger",
                "DepartmentLevelIdentifier": "NY1-niveau",
                "DepartmentName": "Udgåede afdelinger",
                "DepartmentUUIDIdentifier": "cccccccc-cccc-cccc-cccc-cccccccccccc",
            },
        ],
    }
    sd_departments = GetDepartmentResponse.parse_obj(sd_departments_json)
    return sd_departments


@pytest.fixture
async def bruce_lee(graphql_client: GraphQLClient) -> UUID:
    r = await graphql_client._testing__create_employee(uuid4(), "Bruce", "Lee")
    return r.uuid


@pytest.fixture
async def job_function(graphql_client: GraphQLClient) -> UUID:
    current_class = one(
        (
            await graphql_client.get_class(
                ClassFilter(
                    facet=FacetFilter(user_keys=["engagement_job_function"]),
                    user_keys=["Ninja"],
                )
            )
        ).objects
    ).current
    assert current_class is not None
    return current_class.uuid


@pytest.fixture
async def job_function_1234(graphql_client: GraphQLClient) -> UUID:
    current_class = one(
        (
            await graphql_client.get_class(
                ClassFilter(
                    facet=FacetFilter(user_keys=["engagement_job_function"]),
                    user_keys=["1234"],
                )
            )
        ).objects
    ).current
    assert current_class is not None
    return current_class.uuid


@pytest.fixture
async def job_function_5678(graphql_client: GraphQLClient) -> UUID:
    current_class = one(
        (
            await graphql_client.get_class(
                ClassFilter(
                    facet=FacetFilter(user_keys=["engagement_job_function"]),
                    user_keys=["5678"],
                )
            )
        ).objects
    ).current
    assert current_class is not None
    return current_class.uuid


@pytest.fixture
async def job_function_9000(graphql_client: GraphQLClient) -> UUID:
    current_class = one(
        (
            await graphql_client.get_class(
                ClassFilter(
                    facet=FacetFilter(user_keys=["engagement_job_function"]),
                    user_keys=["9000"],
                )
            )
        ).objects
    ).current
    assert current_class is not None
    return current_class.uuid


@pytest.fixture
async def job_function_unknown(graphql_client: GraphQLClient) -> UUID:
    current_class = one(
        (
            await graphql_client.get_class(
                ClassFilter(
                    facet=FacetFilter(user_keys=["engagement_job_function"]),
                    user_keys=["unknown"],
                )
            )
        ).objects
    ).current
    assert current_class is not None
    return current_class.uuid


@pytest.fixture
async def engagement_type(graphql_client: GraphQLClient) -> UUID:
    current_class = one(
        (
            await graphql_client.get_class(
                ClassFilter(
                    facet=FacetFilter(user_keys=["engagement_type"]),
                    user_keys=["TestAnsat"],
                )
            )
        ).objects
    ).current
    assert current_class is not None
    return current_class.uuid


def get_department_response_for_date_range_error(
    department_number: str,
    earliest_start_date: date,
) -> str:
    """
    Generate the GetDepartment response for the date range error integration
    test sdtoolplus.tests.integration.test_tree_structure.test_build_tree_date_range_errors

    Args:
        department_number: the SD department number
        earliest_start_date: the earliest department start date in the SD response
    """

    # Simple asserts to make sure the string is consistent - we are not trying
    # make a generel and more complex solution here!
    assert int(department_number) > 0
    assert date(1950, 1, 1) < earliest_start_date < date(1998, 5, 31)

    dep_id = f"dep{department_number}"
    dep_uuid = f"{department_number}0000000-0000-0000-0000-000000000000"
    dep_name = f"Department {department_number}"

    response = '<?xml version="1.0" encoding="UTF-8" ?>'
    '<GetDepartment20111201 creationDateTime="2024-04-22T10:05:14" >'
    "  <RequestStructure>"
    "    <InstitutionIdentifier>XY</InstitutionIdentifier>"
    "    <DepartmentUUIDIdentifier>50000000-0000-0000-0000-000000000000</DepartmentUUIDIdentifier>"
    "    <ActivationDate>1930-01-01</ActivationDate>"
    "    <DeactivationDate>2024-04-22</DeactivationDate>"
    "    <ContactInformationIndicator>false</ContactInformationIndicator>"
    "    <DepartmentNameIndicator>true</DepartmentNameIndicator>"
    "    <EmploymentDepartmentIndicator>false</EmploymentDepartmentIndicator>"
    "    <PostalAddressIndicator>false</PostalAddressIndicator>"
    "    <ProductionUnitIndicator>false</ProductionUnitIndicator>"
    "    <UUIDIndicator>true</UUIDIndicator>"
    "  </RequestStructure>"
    "  <RegionIdentifier>RI</RegionIdentifier>"
    "  <RegionUUIDIdentifier>4b80fcea-c23f-4d3c-82fd-69c0b180c62d</RegionUUIDIdentifier>"
    "  <InstitutionIdentifier>II</InstitutionIdentifier>"
    "  <InstitutionUUIDIdentifier>3db34422-91bd-4580-975c-ea240adb5dd9</InstitutionUUIDIdentifier>"
    "  <Department>"
    f"    <ActivationDate>{earliest_start_date.strftime('%y-%m-%d')}</ActivationDate>"
    "    <DeactivationDate>1998-05-31</DeactivationDate>"
    f"    <DepartmentIdentifier>{dep_id}</DepartmentIdentifier>"
    f"    <DepartmentUUIDIdentifier>{dep_uuid}</DepartmentUUIDIdentifier>"
    "    <DepartmentLevelIdentifier>NY0-niveau</DepartmentLevelIdentifier>"
    f"    <DepartmentName>Department{department_number}</DepartmentName>"
    "  </Department>"
    "  <Department>"
    "    <ActivationDate>1998-06-01</ActivationDate>"
    "    <DeactivationDate>9999-12-31</DeactivationDate>"
    f"    <DepartmentIdentifier>{dep_id}</DepartmentIdentifier>"
    f"    <DepartmentUUIDIdentifier>{dep_uuid}</DepartmentUUIDIdentifier>"
    "    <DepartmentLevelIdentifier>NY0-niveau</DepartmentLevelIdentifier>"
    f"    <DepartmentName>{dep_name}</DepartmentName>"
    "  </Department>"
    "</GetDepartment20111201>"

    return response


@pytest.fixture
def sd_parent_history_resp() -> list[dict[str, str]]:
    return [
        {
            "startDate": "2001-01-01",
            "endDate": "2002-12-31",
            "parentUuid": "30000000-0000-0000-0000-000000000000",
        },
        {
            "startDate": "2003-01-01",
            "endDate": "2006-12-31",
            "parentUuid": "40000000-0000-0000-0000-000000000000",
        },
    ]
