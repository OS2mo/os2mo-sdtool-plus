# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from uuid import UUID

import pytest
from fastapi import FastAPI
from fastramqpi.pytest_plugin import run_server
from more_itertools import one
from respx import MockRouter

from sdtoolplus.autogenerated_graphql_client import GraphQLClient
from sdtoolplus.config import TIMEZONE
from sdtoolplus.mo.timelines.common import mo_end_to_timeline_end
from sdtoolplus.mo_org_unit_importer import OrgUnitLevelUUID
from sdtoolplus.mo_org_unit_importer import OrgUnitUUID
from sdtoolplus.models import POSITIVE_INFINITY


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "MO_SUBTREE_PATHS_FOR_ROOT": '{"AA": ["12121212-1212-1212-1212-121212121212", "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"], "BB": ["12121212-1212-1212-1212-121212121212", "20000000-0000-0000-0000-000000000000"], "CC": ["12121212-1212-1212-1212-121212121212", "cccccccc-cccc-cccc-cccc-cccccccccccc"]}',
        "ENSURE_SD_INSTITUTION_UNITS": "true",
        "SD_REGION_IDENTIFIER": "RI",
    }
)
async def test_roots(
    app: FastAPI,
    graphql_client: GraphQLClient,
    org_unit_type: OrgUnitUUID,
    org_unit_levels: dict[str, OrgUnitLevelUUID],
    respx_mock: MockRouter,
):
    """
    We are testing the function to ensure the SD institutions are present in the
    top of the OU-tree. The following subtree paths for root are considered:

    SD institution: AA
    Subtree path: 12121212-1212-1212-1212-121212121212/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
    (this institution MO unit is already present in MO, and the UUID of the SD
    institution is the same as the UUID of the MO unit)

    SD institution: BB
    Subtree path: 12121212-1212-1212-1212-121212121212/20000000-0000-0000-0000-000000000000
    (this institution MO unit is already present in MO, but the UUID of the SD
    institution is NOT the same as the UUID of the MO unit)

    SD institution CC
    Subtree path: 12121212-1212-1212-1212-121212121212/cccccccc-cccc-cccc-cccc-cccccccccccc
    (this institution MO unit is not already found in MO)
    """
    # Arrange
    root_uuid = UUID("12121212-1212-1212-1212-121212121212")
    AA_uuid = UUID("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
    CC_uuid = UUID("cccccccc-cccc-cccc-cccc-cccccccccccc")

    min_mo_datetime = datetime(1930, 1, 1, tzinfo=TIMEZONE)

    # Build the base tree structure
    await graphql_client._testing__create_org_unit(
        uuid=root_uuid,
        name="Root",
        user_key="root",
        org_unit_type=org_unit_type,
        from_date=min_mo_datetime,
    )

    await graphql_client._testing__create_org_unit(
        uuid=AA_uuid,
        name="Institution AA",
        user_key="AA",
        org_unit_type=org_unit_type,
        org_unit_level=org_unit_levels["TOP"],
        from_date=min_mo_datetime,
        parent=root_uuid,
    )

    await graphql_client._testing__create_org_unit(
        # Note - we are using this UUID instead of the AA_uuid
        uuid=UUID("20000000-0000-0000-0000-000000000000"),
        name="Institution BB",
        user_key="BB",
        org_unit_type=org_unit_type,
        org_unit_level=org_unit_levels["TOP"],
        from_date=min_mo_datetime,
        parent=root_uuid,
    )

    def get_inst_sd_resp(institution_identifier: str) -> str:
        map_ = {
            "AA": "aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa",
            "BB": "bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb",
            "CC": "cccccccc-cccc-cccc-cccc-cccccccccccc",
        }

        return f"""<?xml version="1.0" encoding="UTF-8"?>
            <GetInstitution20111201 creationDateTime="2025-09-22T14:18:59">
              <RequestStructure>
                <RegionIdentifier>RI</RegionIdentifier>
                <InstitutionIdentifier>II</InstitutionIdentifier>
                <AdministrationIndicator>false</AdministrationIndicator>
                <ContactInformationIndicator>false</ContactInformationIndicator>
                <PostalAddressIndicator>false</PostalAddressIndicator>
                <ProductionUnitIndicator>false</ProductionUnitIndicator>
                <UUIDIndicator>true</UUIDIndicator>
              </RequestStructure>
              <Region>
                <RegionIdentifier>RI</RegionIdentifier>
                <RegionUUIDIdentifier>aba6cd29-2a01-4da6-9542-e0040da418e1</RegionUUIDIdentifier>
                <RegionName>Magenta</RegionName>
                <Institution>
                  <InstitutionIdentifier>{institution_identifier}</InstitutionIdentifier>
                  <InstitutionUUIDIdentifier>{map_[institution_identifier]}</InstitutionUUIDIdentifier>
                  <InstitutionName>Institution {institution_identifier}</InstitutionName>
                </Institution>
              </Region>
            </GetInstitution20111201>
        """

    respx_mock.get(
        "https://service.sd.dk/sdws/GetInstitution20111201?RegionIdentifier=RI&InstitutionIdentifier=AA&AdministrationIndicator=False&ContactInformationIndicator=False&PostalAddressIndicator=False&ProductionUnitIndicator=False&UUIDIndicator=True"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content=get_inst_sd_resp("AA"),
    )

    respx_mock.get(
        "https://service.sd.dk/sdws/GetInstitution20111201?RegionIdentifier=RI&InstitutionIdentifier=BB&AdministrationIndicator=False&ContactInformationIndicator=False&PostalAddressIndicator=False&ProductionUnitIndicator=False&UUIDIndicator=True"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content=get_inst_sd_resp("BB"),
    )

    respx_mock.get(
        "https://service.sd.dk/sdws/GetInstitution20111201?RegionIdentifier=RI&InstitutionIdentifier=CC&AdministrationIndicator=False&ContactInformationIndicator=False&PostalAddressIndicator=False&ProductionUnitIndicator=False&UUIDIndicator=True"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content=get_inst_sd_resp("CC"),
    )

    # Act
    async with run_server(app):
        pass

    # Assert
    AA_unit = await graphql_client.get_org_unit_timeline(AA_uuid, None, None)
    validity = one(one(AA_unit.objects).validities)

    assert validity.validity.from_ == min_mo_datetime
    assert mo_end_to_timeline_end(validity.validity.to) == POSITIVE_INFINITY
    assert validity.name == "Institution AA"
    assert validity.user_key == "AA"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "TOP"
    assert validity.parent_uuid == root_uuid

    BB_unit = await graphql_client.get_org_unit_timeline(
        UUID("20000000-0000-0000-0000-000000000000"), None, None
    )
    validity = one(one(BB_unit.objects).validities)

    assert validity.validity.from_ == min_mo_datetime
    assert mo_end_to_timeline_end(validity.validity.to) == POSITIVE_INFINITY
    assert validity.name == "Institution BB"
    assert validity.user_key == "BB"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "TOP"
    assert validity.parent_uuid == root_uuid

    CC_unit = await graphql_client.get_org_unit_timeline(CC_uuid, None, None)
    validity = one(one(CC_unit.objects).validities)

    assert validity.validity.from_ == min_mo_datetime
    assert mo_end_to_timeline_end(validity.validity.to) == POSITIVE_INFINITY
    assert validity.name == "Institution CC"
    assert validity.user_key == "CC"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "TOP"
    assert validity.parent_uuid == root_uuid
