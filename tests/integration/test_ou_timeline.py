# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from uuid import UUID
from zoneinfo import ZoneInfo

import pytest
from httpx import AsyncClient
from more_itertools import one
from respx import MockRouter

from sdtoolplus.autogenerated_graphql_client import OrganisationUnitCreateInput
from sdtoolplus.autogenerated_graphql_client import OrganisationUnitUpdateInput
from sdtoolplus.autogenerated_graphql_client import RAValidityInput
from sdtoolplus.autogenerated_graphql_client import TestingCreateOrgUnitOrgUnitCreate
from sdtoolplus.depends import GraphQLClient
from sdtoolplus.mo.timeline import _mo_end_to_timeline_end
from sdtoolplus.mo.timeline import timeline_interval_to_mo_validity
from sdtoolplus.mo_org_unit_importer import OrgUnitLevelUUID
from sdtoolplus.mo_org_unit_importer import OrgUnitUUID
from sdtoolplus.models import POSITIVE_INFINITY


@pytest.mark.integration_test
@pytest.mark.envvar({"MODE": "region"})
async def test_ou_timeline_name_and_id_and_level_and_parent_http_triggered_sync(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,  # Maybe switch
    org_unit_type: OrgUnitUUID,
    org_unit_levels: dict[str, OrgUnitLevelUUID],
    base_tree_builder: TestingCreateOrgUnitOrgUnitCreate,
    sd_parent_history_resp: list[dict[str, str]],
    respx_mock: MockRouter,
):
    """
    We are testing this scenario:

    Time  --------t1--------t2---------t3------t4-----t5-----t6------------t7------->

    MO (name)               |------name4-------|---------------name5-----------------
    MO (id)                 |-----------II-ABCD--------------|-------II-IJKL---------
    MO (level)              |---NY0----|-------------------NY1-----------------------
    MO (parent)             |----------dep1-----------|-----------dep2---------------

    "Arrange" intervals     |-----1----|---2---|---3--|---4--|---------5-------------

    SD (name)     |-------name1--------|----name2-----|-------name3--------|
    SD (id)       |-----------------ABCD--------------|--------EFGH--------|
    SD (level)    |---NY0---|--------------------NY1-----------------------|
    SD (parent)   |--------dep3--------|-------------dep4------------------|

    "Assert"      |----1----|-----2----|-------3------|---------4----------|
    intervals

    In SD: id = DepartmentIdentifier
    In MO: id = user_key
    """
    # Arrange
    tz = ZoneInfo("Europe/Copenhagen")

    t1 = datetime(2001, 1, 1, tzinfo=tz)
    t2 = datetime(2002, 1, 1, tzinfo=tz)
    t3 = datetime(2003, 1, 1, tzinfo=tz)
    t4 = datetime(2004, 1, 1, tzinfo=tz)
    t5 = datetime(2005, 1, 1, tzinfo=tz)
    t6 = datetime(2006, 1, 1, tzinfo=tz)
    t7 = datetime(2007, 1, 1, tzinfo=tz)

    unit_uuid = UUID("11111111-1111-1111-1111-111111111111")

    # Create unit (arrange interval 1-5)
    await graphql_client._testing__create_org_unit(
        uuid=unit_uuid,
        name="name4",
        user_key="II-ABCD",
        org_unit_type=org_unit_type,
        org_unit_level=org_unit_levels["NY0-niveau"],
        from_date=t2,
        parent=OrgUnitUUID("10000000-0000-0000-0000-000000000000"),
    )

    # Update unit (arrange interval 2)
    await graphql_client.update_org_unit(
        OrganisationUnitUpdateInput(
            uuid=unit_uuid,
            name="name4",
            user_key="II-ABCD",
            org_unit_level=org_unit_levels["NY1-niveau"],
            validity=RAValidityInput(
                from_=t3,
                to=t4,
            ),
            parent=OrgUnitUUID("10000000-0000-0000-0000-000000000000"),
        )
    )

    # Update unit (arrange interval 3)
    await graphql_client.update_org_unit(
        OrganisationUnitUpdateInput(
            uuid=unit_uuid,
            name="name5",
            user_key="II-ABCD",
            org_unit_level=org_unit_levels["NY1-niveau"],
            validity=RAValidityInput(
                from_=t4,
                to=t5,
            ),
            parent=OrgUnitUUID("10000000-0000-0000-0000-000000000000"),
        )
    )

    # Update unit (arrange interval 4)
    await graphql_client.update_org_unit(
        OrganisationUnitUpdateInput(
            uuid=unit_uuid,
            name="name5",
            user_key="II-ABCD",
            org_unit_level=org_unit_levels["NY1-niveau"],
            validity=RAValidityInput(
                from_=t5,
                to=t6,
            ),
            parent=OrgUnitUUID("20000000-0000-0000-0000-000000000000"),
        )
    )

    # Update unit (arrange interval 5)
    await graphql_client.update_org_unit(
        OrganisationUnitUpdateInput(
            uuid=unit_uuid,
            name="name5",
            user_key="II-IJKL",
            org_unit_level=org_unit_levels["NY1-niveau"],
            validity=RAValidityInput(
                from_=t6,
                to=None,
            ),
            parent=OrgUnitUUID("20000000-0000-0000-0000-000000000000"),
        )
    )

    sd_dep_resp = f"""<?xml version="1.0" encoding="UTF-8"?>
        <GetDepartment20111201 creationDateTime="2025-02-18T10:41:08">
          <RequestStructure>
            <InstitutionIdentifier>II</InstitutionIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <ActivationDate>1930-02-18</ActivationDate>
            <DeactivationDate>9999-12-31</DeactivationDate>
            <ContactInformationIndicator>false</ContactInformationIndicator>
            <DepartmentNameIndicator>true</DepartmentNameIndicator>
            <EmploymentDepartmentIndicator>false</EmploymentDepartmentIndicator>
            <PostalAddressIndicator>false</PostalAddressIndicator>
            <ProductionUnitIndicator>false</ProductionUnitIndicator>
            <UUIDIndicator>true</UUIDIndicator>
          </RequestStructure>
          <RegionIdentifier>RI</RegionIdentifier>
          <RegionUUIDIdentifier>838b8691-7785-4f64-a83a-b383567dd171</RegionUUIDIdentifier>
          <InstitutionIdentifier>II</InstitutionIdentifier>
          <InstitutionUUIDIdentifier>d6024493-a920-4040-9876-9faaae88efc1</InstitutionUUIDIdentifier>
          <Department>
            <ActivationDate>2001-01-01</ActivationDate>
            <DeactivationDate>2001-12-31</DeactivationDate>
            <DepartmentIdentifier>ABCD</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>NY0-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name1</DepartmentName>
          </Department>
          <Department>
            <ActivationDate>2002-01-01</ActivationDate>
            <DeactivationDate>2002-12-31</DeactivationDate>
            <DepartmentIdentifier>ABCD</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>NY1-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name1</DepartmentName>
          </Department>
          <Department>
            <ActivationDate>2003-01-01</ActivationDate>
            <DeactivationDate>2004-12-31</DeactivationDate>
            <DepartmentIdentifier>ABCD</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>NY1-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name2</DepartmentName>
          </Department>
          <Department>
            <ActivationDate>2005-01-01</ActivationDate>
            <DeactivationDate>2005-12-31</DeactivationDate>
            <DepartmentIdentifier>EFGH</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>NY1-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name3</DepartmentName>
          </Department>
          <Department>
            <ActivationDate>2006-01-01</ActivationDate>
            <DeactivationDate>2006-12-31</DeactivationDate>
            <DepartmentIdentifier>EFGH</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>NY1-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name3</DepartmentName>
          </Department>
        </GetDepartment20111201>
    """

    respx_mock.get(
        f"https://service.sd.dk/sdws/GetDepartment20111201?InstitutionIdentifier=II&DepartmentUUIDIdentifier={str(unit_uuid)}&ActivationDate=01.01.0001&DeactivationDate=31.12.9999&DepartmentNameIndicator=True&PostalAddressIndicator=False&UUIDIndicator=True"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content=sd_dep_resp,
    )

    respx_mock.get(
        f"https://service.sd.dk/api-gateway/organization/api/v1/organizations/uuids/{str(unit_uuid)}/department-parent-history"
    ).respond(
        json=sd_parent_history_resp,
    )

    # Act
    r = await test_client.post(
        "/timeline/sync/ou", params={"inst_id": "II", "org_unit": str(unit_uuid)}
    )

    # Assert
    assert r.status_code == 200

    updated_unit = await graphql_client.get_org_unit_timeline(unit_uuid, None, None)
    validities = one(updated_unit.objects).validities

    assert len(validities) == 4

    validity = validities[0]
    assert validity.validity.from_ == t1
    assert _mo_end_to_timeline_end(validity.validity.to) == t2
    assert validity.name == "name1"
    assert validity.user_key == "II-ABCD"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "NY0-niveau"
    assert validity.parent is not None
    assert validity.parent.uuid == OrgUnitUUID("30000000-0000-0000-0000-000000000000")

    validity = validities[1]
    assert validity.validity.from_ == t2
    assert _mo_end_to_timeline_end(validity.validity.to) == t3
    assert validity.name == "name1"
    assert validity.user_key == "II-ABCD"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "NY1-niveau"
    assert validity.parent is not None
    assert validity.parent.uuid == OrgUnitUUID("30000000-0000-0000-0000-000000000000")

    validity = validities[2]
    assert validity.validity.from_ == t3
    assert _mo_end_to_timeline_end(validity.validity.to) == t5
    assert validity.name == "name2"
    assert validity.user_key == "II-ABCD"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "NY1-niveau"
    assert validity.parent is not None
    assert validity.parent.uuid == OrgUnitUUID("40000000-0000-0000-0000-000000000000")

    validity = validities[3]
    assert validity.validity.from_ == t5
    assert _mo_end_to_timeline_end(validity.validity.to) == t7
    assert validity.name == "name3"
    assert validity.user_key == "II-EFGH"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "NY1-niveau"
    assert validity.parent is not None
    assert validity.parent.uuid == OrgUnitUUID("40000000-0000-0000-0000-000000000000")


@pytest.mark.integration_test
@pytest.mark.envvar({"MODE": "region"})
async def test_ou_timeline_sd_unit_should_extend_mo_unit(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,  # Maybe switch
    org_unit_type: OrgUnitUUID,
    org_unit_levels: dict[str, OrgUnitLevelUUID],
    base_tree_builder: TestingCreateOrgUnitOrgUnitCreate,
    sd_parent_history_resp: list[dict[str, str]],
    respx_mock: MockRouter,
):
    """
    We are testing this scenario:

    Time  --------t1--------t2-------------------------------t6--------------------->

    MO (name)               |--------------name1-------------|
    MO (id)                 |-----------II-ABCD--------------|
    MO (level)              |---------------NY0--------------|
    MO (parent)             |--------------dep1--------------|

    "Arrange" intervals     |----------------1---------------|

    SD (name)     |------------------------name1-------------------------------------
    SD (id)       |------------------------ABCD--------------------------------------
    SD (level)    |-------------------------NY0--------------------------------------
    SD (parent)   |------------------------dep1--------------------------------------

    "Assert"      |--------------------------1---------------------------------------
    intervals
    """
    # Arrange
    tz = ZoneInfo("Europe/Copenhagen")

    t1 = datetime(2001, 1, 1, tzinfo=tz)
    t2 = datetime(2002, 1, 1, tzinfo=tz)
    t6 = datetime(2006, 1, 1, tzinfo=tz)

    unit_uuid = UUID("11111111-1111-1111-1111-111111111111")

    # Create unit (arrange interval 1)
    await graphql_client.create_org_unit(
        OrganisationUnitCreateInput(
            uuid=unit_uuid,
            validity=timeline_interval_to_mo_validity(start=t2, end=t6),
            name="name1",
            user_key="II-ABCD",
            parent=OrgUnitUUID("10000000-0000-0000-0000-000000000000"),
            org_unit_type=org_unit_type,
            org_unit_level=org_unit_levels["NY0-niveau"],
        )
    )

    sd_dep_resp = f"""<?xml version="1.0" encoding="UTF-8"?>
        <GetDepartment20111201 creationDateTime="2025-02-18T10:41:08">
          <RequestStructure>
            <InstitutionIdentifier>II</InstitutionIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <ActivationDate>1930-02-18</ActivationDate>
            <DeactivationDate>9999-12-31</DeactivationDate>
            <ContactInformationIndicator>false</ContactInformationIndicator>
            <DepartmentNameIndicator>true</DepartmentNameIndicator>
            <EmploymentDepartmentIndicator>false</EmploymentDepartmentIndicator>
            <PostalAddressIndicator>false</PostalAddressIndicator>
            <ProductionUnitIndicator>false</ProductionUnitIndicator>
            <UUIDIndicator>true</UUIDIndicator>
          </RequestStructure>
          <RegionIdentifier>RI</RegionIdentifier>
          <RegionUUIDIdentifier>838b8691-7785-4f64-a83a-b383567dd171</RegionUUIDIdentifier>
          <InstitutionIdentifier>II</InstitutionIdentifier>
          <InstitutionUUIDIdentifier>d6024493-a920-4040-9876-9faaae88efc1</InstitutionUUIDIdentifier>
          <Department>
            <ActivationDate>2001-01-01</ActivationDate>
            <DeactivationDate>9999-12-31</DeactivationDate>
            <DepartmentIdentifier>ABCD</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>NY0-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name1</DepartmentName>
          </Department>
        </GetDepartment20111201>
    """

    respx_mock.get(
        f"https://service.sd.dk/sdws/GetDepartment20111201?InstitutionIdentifier=II&DepartmentUUIDIdentifier={str(unit_uuid)}&ActivationDate=01.01.0001&DeactivationDate=31.12.9999&DepartmentNameIndicator=True&PostalAddressIndicator=False&UUIDIndicator=True"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content=sd_dep_resp,
    )

    respx_mock.get(
        f"https://service.sd.dk/api-gateway/organization/api/v1/organizations/uuids/{str(unit_uuid)}/department-parent-history"
    ).respond(
        json=[
            {
                "startDate": "2001-01-01",
                "endDate": "9999-12-31",
                "parentUuid": "10000000-0000-0000-0000-000000000000",
            },
        ],
    )

    # Act
    r = await test_client.post(
        "/timeline/sync/ou", params={"inst_id": "II", "org_unit": str(unit_uuid)}
    )

    # Assert
    assert r.status_code == 200

    updated_unit = await graphql_client.get_org_unit_timeline(unit_uuid, None, None)
    validities = one(updated_unit.objects).validities

    assert len(validities) == 1

    validity = validities[0]
    assert validity.validity.from_ == t1
    assert _mo_end_to_timeline_end(validity.validity.to) == POSITIVE_INFINITY
    assert validity.name == "name1"
    assert validity.user_key == "II-ABCD"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "NY0-niveau"
    assert validity.parent is not None
    assert validity.parent.uuid == OrgUnitUUID("10000000-0000-0000-0000-000000000000")


@pytest.mark.integration_test
@pytest.mark.envvar({"MODE": "region"})
async def test_ou_timeline_create_new_unit(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,  # Maybe switch
    org_unit_type: OrgUnitUUID,
    org_unit_levels: dict[str, OrgUnitLevelUUID],
    base_tree_builder: TestingCreateOrgUnitOrgUnitCreate,
    sd_parent_history_resp: list[dict[str, str]],
    respx_mock: MockRouter,
):
    """
    We are testing this scenario:

    Time  --------t1-------------------t3----------------------------------t7------>

    MO (unit does not exist)

    SD (name)     |-------------------------name1--------------------------|
    SD (id)       |-------------------------ABCD---------------------------|
    SD (level)    |-------------------------NY0----------------------------|
    SD (parent)   |--------dep3--------|-------------dep4------------------|

    "Assert"      |---------1----------|--------------2--------------------|
    intervals
    """
    # Arrange
    tz = ZoneInfo("Europe/Copenhagen")

    t1 = datetime(2001, 1, 1, tzinfo=tz)
    t3 = datetime(2003, 1, 1, tzinfo=tz)
    t7 = datetime(2007, 1, 1, tzinfo=tz)

    unit_uuid = UUID("11111111-1111-1111-1111-111111111111")

    sd_dep_resp = f"""<?xml version="1.0" encoding="UTF-8"?>
        <GetDepartment20111201 creationDateTime="2025-02-18T10:41:08">
          <RequestStructure>
            <InstitutionIdentifier>II</InstitutionIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <ActivationDate>1930-02-18</ActivationDate>
            <DeactivationDate>9999-12-31</DeactivationDate>
            <ContactInformationIndicator>false</ContactInformationIndicator>
            <DepartmentNameIndicator>true</DepartmentNameIndicator>
            <EmploymentDepartmentIndicator>false</EmploymentDepartmentIndicator>
            <PostalAddressIndicator>false</PostalAddressIndicator>
            <ProductionUnitIndicator>false</ProductionUnitIndicator>
            <UUIDIndicator>true</UUIDIndicator>
          </RequestStructure>
          <RegionIdentifier>RI</RegionIdentifier>
          <RegionUUIDIdentifier>838b8691-7785-4f64-a83a-b383567dd171</RegionUUIDIdentifier>
          <InstitutionIdentifier>II</InstitutionIdentifier>
          <InstitutionUUIDIdentifier>d6024493-a920-4040-9876-9faaae88efc1</InstitutionUUIDIdentifier>
          <Department>
            <ActivationDate>2001-01-01</ActivationDate>
            <DeactivationDate>2006-12-31</DeactivationDate>
            <DepartmentIdentifier>ABCD</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>NY0-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name1</DepartmentName>
          </Department>
        </GetDepartment20111201>
    """

    respx_mock.get(
        f"https://service.sd.dk/sdws/GetDepartment20111201?InstitutionIdentifier=II&DepartmentUUIDIdentifier={str(unit_uuid)}&ActivationDate=01.01.0001&DeactivationDate=31.12.9999&DepartmentNameIndicator=True&PostalAddressIndicator=False&UUIDIndicator=True"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content=sd_dep_resp,
    )

    respx_mock.get(
        f"https://service.sd.dk/api-gateway/organization/api/v1/organizations/uuids/{str(unit_uuid)}/department-parent-history"
    ).respond(
        json=sd_parent_history_resp,
    )

    # Act
    r = await test_client.post(
        "/timeline/sync/ou", params={"inst_id": "II", "org_unit": str(unit_uuid)}
    )

    # Assert
    assert r.status_code == 200

    updated_unit = await graphql_client.get_org_unit_timeline(unit_uuid, None, None)
    validities = one(updated_unit.objects).validities

    assert len(validities) == 2

    validity = validities[0]
    assert validity.validity.from_ == t1
    assert _mo_end_to_timeline_end(validity.validity.to) == t3
    assert validity.name == "name1"
    assert validity.user_key == "II-ABCD"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "NY0-niveau"
    assert validity.parent is not None
    assert validity.parent.uuid == OrgUnitUUID("30000000-0000-0000-0000-000000000000")

    validity = validities[1]
    assert validity.validity.from_ == t3
    assert _mo_end_to_timeline_end(validity.validity.to) == t7
    assert validity.name == "name1"
    assert validity.user_key == "II-ABCD"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "NY0-niveau"
    assert validity.parent is not None
    assert validity.parent.uuid == OrgUnitUUID("40000000-0000-0000-0000-000000000000")


# TODO: add test with two successive intervals to be termination intervals
