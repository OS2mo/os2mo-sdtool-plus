# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from uuid import UUID
from zoneinfo import ZoneInfo

import pytest
from httpx import AsyncClient
from more_itertools import one
from respx import MockRouter

from sdtoolplus.autogenerated_graphql_client import AddressCreateInput
from sdtoolplus.autogenerated_graphql_client import AddressFilter
from sdtoolplus.autogenerated_graphql_client import ClassFilter
from sdtoolplus.autogenerated_graphql_client import FacetFilter
from sdtoolplus.autogenerated_graphql_client import OrganisationUnitCreateInput
from sdtoolplus.autogenerated_graphql_client import OrganisationUnitUpdateInput
from sdtoolplus.autogenerated_graphql_client import RAValidityInput
from sdtoolplus.autogenerated_graphql_client import TestingCreateOrgUnitOrgUnitCreate
from sdtoolplus.depends import GraphQLClient
from sdtoolplus.mo.timeline import _mo_end_to_timeline_end
from sdtoolplus.mo.timeline import timeline_interval_to_mo_validity
from sdtoolplus.mo_org_unit_importer import OrgUnitLevelUUID
from sdtoolplus.mo_org_unit_importer import OrgUnitUUID
from sdtoolplus.models import POSITIVE_INFINITY
from tests.conftest import UNKNOWN_UNIT


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "MODE": "region",
        "UNKNOWN_UNIT": str(UNKNOWN_UNIT),
        "APPLY_NY_LOGIC": "false",
        "MO_SUBTREE_PATHS_FOR_ROOT": '{"II": ["12121212-1212-1212-1212-121212121212", "10000000-0000-0000-0000-000000000000"]}',
    }
)
async def test_ou_timeline_name_and_id_and_level_and_parent_http_triggered_sync(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,  # Maybe switch
    org_unit_type: OrgUnitUUID,
    org_unit_levels: dict[str, OrgUnitLevelUUID],
    base_tree_builder: TestingCreateOrgUnitOrgUnitCreate,
    sd_parent_history_resp: list[dict[str, str]],
    respx_mock: MockRouter,
):
    """
    We are testing this scenario:

    Time  --------t1--------t2---------t3------t4-----t5-----t6------------t7------->

    MO (name)               |------name4-------|---------------name5-----------------
    MO (id)                 |-----------II-ABCD--------------|-------II-IJKL---------
    MO (level)              |---NY0----|-------------------NY1-----------------------
    MO (parent)             |----------dep1-----------|-----------dep2---------------

    "Arrange" intervals     |-----1----|---2---|---3--|---4--|---------5-------------

    SD (name)     |-------name1--------|----name2-----|-------name3--------|
    SD (id)       |-----------------ABCD--------------|--------EFGH--------|
    SD (level)    |---NY0---|--------------------NY1-----------------------|
    SD (parent)   |--------dep3--------|-------------dep4------------------|

    "Assert"      |----1----|-----2----|-------3------|---------4----------|
    intervals

    In SD: id = DepartmentIdentifier
    In MO: id = user_key
    """
    # Arrange
    tz = ZoneInfo("Europe/Copenhagen")

    t1 = datetime(2001, 1, 1, tzinfo=tz)
    t2 = datetime(2002, 1, 1, tzinfo=tz)
    t3 = datetime(2003, 1, 1, tzinfo=tz)
    t4 = datetime(2004, 1, 1, tzinfo=tz)
    t5 = datetime(2005, 1, 1, tzinfo=tz)
    t6 = datetime(2006, 1, 1, tzinfo=tz)
    t7 = datetime(2007, 1, 1, tzinfo=tz)

    unit_uuid = UUID("11111111-1111-1111-1111-111111111111")

    # Create unit (arrange interval 1-5)
    await graphql_client._testing__create_org_unit(
        uuid=unit_uuid,
        name="name4",
        user_key="II-ABCD",
        org_unit_type=org_unit_type,
        org_unit_level=org_unit_levels["NY0-niveau"],
        from_date=t2,
        parent=OrgUnitUUID("10000000-0000-0000-0000-000000000000"),
    )

    # Update unit (arrange interval 2)
    await graphql_client.update_org_unit(
        OrganisationUnitUpdateInput(
            uuid=unit_uuid,
            name="name4",
            user_key="II-ABCD",
            org_unit_level=org_unit_levels["NY1-niveau"],
            validity=RAValidityInput(
                from_=t3,
                to=t4,
            ),
            parent=OrgUnitUUID("10000000-0000-0000-0000-000000000000"),
        )
    )

    # Update unit (arrange interval 3)
    await graphql_client.update_org_unit(
        OrganisationUnitUpdateInput(
            uuid=unit_uuid,
            name="name5",
            user_key="II-ABCD",
            org_unit_level=org_unit_levels["NY1-niveau"],
            validity=RAValidityInput(
                from_=t4,
                to=t5,
            ),
            parent=OrgUnitUUID("10000000-0000-0000-0000-000000000000"),
        )
    )

    # Update unit (arrange interval 4)
    await graphql_client.update_org_unit(
        OrganisationUnitUpdateInput(
            uuid=unit_uuid,
            name="name5",
            user_key="II-ABCD",
            org_unit_level=org_unit_levels["NY1-niveau"],
            validity=RAValidityInput(
                from_=t5,
                to=t6,
            ),
            parent=OrgUnitUUID("20000000-0000-0000-0000-000000000000"),
        )
    )

    # Update unit (arrange interval 5)
    await graphql_client.update_org_unit(
        OrganisationUnitUpdateInput(
            uuid=unit_uuid,
            name="name5",
            user_key="II-IJKL",
            org_unit_level=org_unit_levels["NY1-niveau"],
            validity=RAValidityInput(
                from_=t6,
                to=None,
            ),
            parent=OrgUnitUUID("20000000-0000-0000-0000-000000000000"),
        )
    )

    sd_dep_resp = f"""<?xml version="1.0" encoding="UTF-8"?>
        <GetDepartment20111201 creationDateTime="2025-02-18T10:41:08">
          <RequestStructure>
            <InstitutionIdentifier>II</InstitutionIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <ActivationDate>1930-02-18</ActivationDate>
            <DeactivationDate>9999-12-31</DeactivationDate>
            <ContactInformationIndicator>false</ContactInformationIndicator>
            <DepartmentNameIndicator>true</DepartmentNameIndicator>
            <EmploymentDepartmentIndicator>false</EmploymentDepartmentIndicator>
            <PostalAddressIndicator>false</PostalAddressIndicator>
            <ProductionUnitIndicator>false</ProductionUnitIndicator>
            <UUIDIndicator>true</UUIDIndicator>
          </RequestStructure>
          <RegionIdentifier>RI</RegionIdentifier>
          <RegionUUIDIdentifier>838b8691-7785-4f64-a83a-b383567dd171</RegionUUIDIdentifier>
          <InstitutionIdentifier>II</InstitutionIdentifier>
          <InstitutionUUIDIdentifier>d6024493-a920-4040-9876-9faaae88efc1</InstitutionUUIDIdentifier>
          <Department>
            <ActivationDate>2001-01-01</ActivationDate>
            <DeactivationDate>2001-12-31</DeactivationDate>
            <DepartmentIdentifier>ABCD</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>NY0-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name1</DepartmentName>
          </Department>
          <Department>
            <ActivationDate>2002-01-01</ActivationDate>
            <DeactivationDate>2002-12-31</DeactivationDate>
            <DepartmentIdentifier>ABCD</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>NY1-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name1</DepartmentName>
          </Department>
          <Department>
            <ActivationDate>2003-01-01</ActivationDate>
            <DeactivationDate>2004-12-31</DeactivationDate>
            <DepartmentIdentifier>ABCD</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>NY1-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name2</DepartmentName>
          </Department>
          <Department>
            <ActivationDate>2005-01-01</ActivationDate>
            <DeactivationDate>2005-12-31</DeactivationDate>
            <DepartmentIdentifier>EFGH</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>NY1-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name3</DepartmentName>
          </Department>
          <Department>
            <ActivationDate>2006-01-01</ActivationDate>
            <DeactivationDate>2006-12-31</DeactivationDate>
            <DepartmentIdentifier>EFGH</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>NY1-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name3</DepartmentName>
          </Department>
        </GetDepartment20111201>
    """

    respx_mock.get(
        f"https://service.sd.dk/sdws/GetDepartment20111201?InstitutionIdentifier=II&DepartmentUUIDIdentifier={str(unit_uuid)}&ActivationDate=01.01.0001&DeactivationDate=31.12.9999&ContactInformationIndicator=False&DepartmentNameIndicator=True&PostalAddressIndicator=False&UUIDIndicator=True"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content=sd_dep_resp,
    )

    respx_mock.get(
        f"https://service.sd.dk/api-gateway/organization/public/api/v1/organizations/uuids/{str(unit_uuid)}/department-parent-history"
    ).respond(
        json=sd_parent_history_resp,
    )

    # Act
    r = await test_client.post(
        "/timeline/sync/ou",
        json={"institution_identifier": "II", "org_unit": str(unit_uuid)},
    )

    # Assert
    assert r.status_code == 200

    updated_unit = await graphql_client.get_org_unit_timeline(unit_uuid, None, None)
    validities = one(updated_unit.objects).validities

    assert len(validities) == 4

    validity = validities[0]
    assert validity.validity.from_ == t1
    assert _mo_end_to_timeline_end(validity.validity.to) == t2
    assert validity.name == "name1"
    assert validity.user_key == "II-ABCD"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "NY0-niveau"
    assert validity.parent is not None
    assert validity.parent.uuid == OrgUnitUUID("30000000-0000-0000-0000-000000000000")

    validity = validities[1]
    assert validity.validity.from_ == t2
    assert _mo_end_to_timeline_end(validity.validity.to) == t3
    assert validity.name == "name1"
    assert validity.user_key == "II-ABCD"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "NY1-niveau"
    assert validity.parent is not None
    assert validity.parent.uuid == OrgUnitUUID("30000000-0000-0000-0000-000000000000")

    validity = validities[2]
    assert validity.validity.from_ == t3
    assert _mo_end_to_timeline_end(validity.validity.to) == t5
    assert validity.name == "name2"
    assert validity.user_key == "II-ABCD"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "NY1-niveau"
    assert validity.parent is not None
    assert validity.parent.uuid == OrgUnitUUID("40000000-0000-0000-0000-000000000000")

    validity = validities[3]
    assert validity.validity.from_ == t5
    assert _mo_end_to_timeline_end(validity.validity.to) == t7
    assert validity.name == "name3"
    assert validity.user_key == "II-EFGH"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "NY1-niveau"
    assert validity.parent is not None
    assert validity.parent.uuid == OrgUnitUUID("40000000-0000-0000-0000-000000000000")


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "MODE": "region",
        "UNKNOWN_UNIT": str(UNKNOWN_UNIT),
        "APPLY_NY_LOGIC": "false",
        "MO_SUBTREE_PATHS_FOR_ROOT": '{"II": ["12121212-1212-1212-1212-121212121212", "10000000-0000-0000-0000-000000000000"]}',
    }
)
async def test_ou_timeline_sd_unit_should_extend_mo_unit(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,  # Maybe switch
    org_unit_type: OrgUnitUUID,
    org_unit_levels: dict[str, OrgUnitLevelUUID],
    base_tree_builder: TestingCreateOrgUnitOrgUnitCreate,
    sd_parent_history_resp: list[dict[str, str]],
    respx_mock: MockRouter,
):
    """
    We are testing this scenario:

    Time  --------t1--------t2-------------------------------t6--------------------->

    MO (name)               |--------------name1-------------|
    MO (id)                 |-----------II-ABCD--------------|
    MO (level)              |---------------NY0--------------|
    MO (parent)             |--------------dep1--------------|

    "Arrange" intervals     |----------------1---------------|

    SD (name)     |------------------------name1-------------------------------------
    SD (id)       |------------------------ABCD--------------------------------------
    SD (level)    |-------------------------NY0--------------------------------------
    SD (parent)   |------------------------dep1--------------------------------------

    "Assert"      |--------------------------1---------------------------------------
    intervals
    """
    # Arrange
    tz = ZoneInfo("Europe/Copenhagen")

    t1 = datetime(2001, 1, 1, tzinfo=tz)
    t2 = datetime(2002, 1, 1, tzinfo=tz)
    t6 = datetime(2006, 1, 1, tzinfo=tz)

    unit_uuid = UUID("11111111-1111-1111-1111-111111111111")

    # Create unit (arrange interval 1)
    await graphql_client.create_org_unit(
        OrganisationUnitCreateInput(
            uuid=unit_uuid,
            validity=timeline_interval_to_mo_validity(start=t2, end=t6),
            name="name1",
            user_key="II-ABCD",
            parent=OrgUnitUUID("10000000-0000-0000-0000-000000000000"),
            org_unit_type=org_unit_type,
            org_unit_level=org_unit_levels["NY0-niveau"],
        )
    )

    sd_dep_resp = f"""<?xml version="1.0" encoding="UTF-8"?>
        <GetDepartment20111201 creationDateTime="2025-02-18T10:41:08">
          <RequestStructure>
            <InstitutionIdentifier>II</InstitutionIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <ActivationDate>1930-02-18</ActivationDate>
            <DeactivationDate>9999-12-31</DeactivationDate>
            <ContactInformationIndicator>false</ContactInformationIndicator>
            <DepartmentNameIndicator>true</DepartmentNameIndicator>
            <EmploymentDepartmentIndicator>false</EmploymentDepartmentIndicator>
            <PostalAddressIndicator>false</PostalAddressIndicator>
            <ProductionUnitIndicator>false</ProductionUnitIndicator>
            <UUIDIndicator>true</UUIDIndicator>
          </RequestStructure>
          <RegionIdentifier>RI</RegionIdentifier>
          <RegionUUIDIdentifier>838b8691-7785-4f64-a83a-b383567dd171</RegionUUIDIdentifier>
          <InstitutionIdentifier>II</InstitutionIdentifier>
          <InstitutionUUIDIdentifier>d6024493-a920-4040-9876-9faaae88efc1</InstitutionUUIDIdentifier>
          <Department>
            <ActivationDate>2001-01-01</ActivationDate>
            <DeactivationDate>9999-12-31</DeactivationDate>
            <DepartmentIdentifier>ABCD</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>NY0-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name1</DepartmentName>
          </Department>
        </GetDepartment20111201>
    """

    respx_mock.get(
        f"https://service.sd.dk/sdws/GetDepartment20111201?InstitutionIdentifier=II&DepartmentUUIDIdentifier={str(unit_uuid)}&ActivationDate=01.01.0001&DeactivationDate=31.12.9999&ContactInformationIndicator=False&DepartmentNameIndicator=True&PostalAddressIndicator=False&UUIDIndicator=True"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content=sd_dep_resp,
    )

    respx_mock.get(
        f"https://service.sd.dk/api-gateway/organization/public/api/v1/organizations/uuids/{str(unit_uuid)}/department-parent-history"
    ).respond(
        json=[
            {
                "startDate": "2001-01-01",
                "endDate": "9999-12-31",
                "parentUuid": "10000000-0000-0000-0000-000000000000",
            },
        ],
    )

    # Act
    r = await test_client.post(
        "/timeline/sync/ou",
        json={"institution_identifier": "II", "org_unit": str(unit_uuid)},
    )

    # Assert
    assert r.status_code == 200

    updated_unit = await graphql_client.get_org_unit_timeline(unit_uuid, None, None)
    validities = one(updated_unit.objects).validities

    assert len(validities) == 1

    validity = validities[0]
    assert validity.validity.from_ == t1
    assert _mo_end_to_timeline_end(validity.validity.to) == POSITIVE_INFINITY
    assert validity.name == "name1"
    assert validity.user_key == "II-ABCD"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "NY0-niveau"
    assert validity.parent is not None
    assert validity.parent.uuid == OrgUnitUUID("10000000-0000-0000-0000-000000000000")


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "MODE": "region",
        "UNKNOWN_UNIT": str(UNKNOWN_UNIT),
        "APPLY_NY_LOGIC": "false",
        "MO_SUBTREE_PATHS_FOR_ROOT": '{"II": ["12121212-1212-1212-1212-121212121212", "10000000-0000-0000-0000-000000000000"]}',
    }
)
async def test_ou_timeline_should_terminate_addresses_before_terminating_unit(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,  # Maybe switch
    org_unit_type: OrgUnitUUID,
    org_unit_levels: dict[str, OrgUnitLevelUUID],
    base_tree_builder: TestingCreateOrgUnitOrgUnitCreate,
    respx_mock: MockRouter,
):
    """
    We are testing this scenario:

    Time  ------------------t1-----------------t2------------t3-------------------t4-->

    MO (active)             |----------------------------------------------------------
    MO (name)               |----------------------name4-------------------------------
    MO (id)                 |---------------------II-ABCD------------------------------
    MO (level)              |-----------------------NY0--------------------------------
    MO (parent)             |-----------------------dep1-------------------------------
    MO (postal addr)        |-------------Kung FU Street, 1000, Andeby-----------------
    MO (phone)              |---------------------12345678-----------------------------
    MO (P-number)           |--------------------1234567890----------------------------

    "Arrange" intervals     |------------------------1---------------------------------

    SD (active)             |------------------|             |--------------------|
    SD (name)               |-------name4------|             |-------name4--------|
    SD (id)                 |-------ABCD-------|             |-------ABCD---------|
    SD (level)              |-------NY0--------|             |-------name4--------|
    SD (parent)             |-------dep1-------|             |-------dep1---------|

    "Assert"                |---------1--------|             |----------2---------|
    intervals

    In SD: id = DepartmentIdentifier
    In MO: id = user_key
    """
    # Arrange
    tz = ZoneInfo("Europe/Copenhagen")

    t1 = datetime(2001, 1, 1, tzinfo=tz)
    t2 = datetime(2002, 1, 1, tzinfo=tz)
    t3 = datetime(2003, 1, 1, tzinfo=tz)
    t4 = datetime(2004, 1, 1, tzinfo=tz)

    unit_uuid = UUID("11111111-1111-1111-1111-111111111111")

    # Create unit (arrange interval 1)
    await graphql_client._testing__create_org_unit(
        uuid=unit_uuid,
        name="name4",
        user_key="II-ABCD",
        org_unit_type=org_unit_type,
        org_unit_level=org_unit_levels["NY0-niveau"],
        from_date=t1,
        parent=OrgUnitUUID("10000000-0000-0000-0000-000000000000"),
    )

    # Get the address visibility UUID
    visibility_class_uuid = one(
        (
            await graphql_client.get_class(
                ClassFilter(
                    facet=FacetFilter(user_keys=["visibility"]),
                    # TODO: handle required variability in municipality mode
                    user_keys=["Intern"],
                )
            )
        ).objects
    ).uuid

    # Get the postal address type UUID
    postal_address_type_uuid = one(
        (
            await graphql_client.get_class(
                ClassFilter(
                    facet=FacetFilter(user_keys=["org_unit_address_type"]),
                    # TODO: handle required variability in municipality mode
                    user_keys=["AdresseAPOSOrgUnit"],
                )
            )
        ).objects
    ).uuid

    # Create postal addresses
    current_postal_address = (
        await graphql_client.create_address(
            AddressCreateInput(
                org_unit=unit_uuid,
                visibility=visibility_class_uuid,
                validity=timeline_interval_to_mo_validity(t1, POSITIVE_INFINITY),
                user_key="AdresseAPOSOrgUnit",
                value="Kung FU Street, 1000, Andeby",
                address_type=postal_address_type_uuid,
            )
        )
    ).current
    assert current_postal_address is not None
    postal_address_uuid = current_postal_address.uuid

    sd_dep_resp = f"""<?xml version="1.0" encoding="UTF-8"?>
        <GetDepartment20111201 creationDateTime="2025-02-18T10:41:08">
          <RequestStructure>
            <InstitutionIdentifier>II</InstitutionIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <ActivationDate>1930-02-18</ActivationDate>
            <DeactivationDate>9999-12-31</DeactivationDate>
            <ContactInformationIndicator>false</ContactInformationIndicator>
            <DepartmentNameIndicator>true</DepartmentNameIndicator>
            <EmploymentDepartmentIndicator>false</EmploymentDepartmentIndicator>
            <PostalAddressIndicator>false</PostalAddressIndicator>
            <ProductionUnitIndicator>false</ProductionUnitIndicator>
            <UUIDIndicator>true</UUIDIndicator>
          </RequestStructure>
          <RegionIdentifier>RI</RegionIdentifier>
          <RegionUUIDIdentifier>838b8691-7785-4f64-a83a-b383567dd171</RegionUUIDIdentifier>
          <InstitutionIdentifier>II</InstitutionIdentifier>
          <InstitutionUUIDIdentifier>d6024493-a920-4040-9876-9faaae88efc1</InstitutionUUIDIdentifier>
          <Department>
            <ActivationDate>2001-01-01</ActivationDate>
            <DeactivationDate>2001-12-31</DeactivationDate>
            <DepartmentIdentifier>ABCD</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>NY0-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name4</DepartmentName>
          </Department>
          <Department>
            <ActivationDate>2003-01-01</ActivationDate>
            <DeactivationDate>2003-12-31</DeactivationDate>
            <DepartmentIdentifier>ABCD</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>NY0-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name4</DepartmentName>
          </Department>
        </GetDepartment20111201>
    """

    respx_mock.get(
        f"https://service.sd.dk/sdws/GetDepartment20111201?InstitutionIdentifier=II&DepartmentUUIDIdentifier={str(unit_uuid)}&ActivationDate=01.01.0001&DeactivationDate=31.12.9999&ContactInformationIndicator=False&DepartmentNameIndicator=True&PostalAddressIndicator=False&UUIDIndicator=True"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content=sd_dep_resp,
    )

    respx_mock.get(
        f"https://service.sd.dk/api-gateway/organization/public/api/v1/organizations/uuids/{str(unit_uuid)}/department-parent-history"
    ).respond(
        json=[
            {
                "startDate": "2001-01-01",
                "endDate": "2001-12-31",
                "parentUuid": "10000000-0000-0000-0000-000000000000",
            },
            {
                "startDate": "2003-01-01",
                "endDate": "2003-12-31",
                "parentUuid": "10000000-0000-0000-0000-000000000000",
            },
        ],
    )

    # Act
    r = await test_client.post(
        "/timeline/sync/ou",
        json={"institution_identifier": "II", "org_unit": str(unit_uuid)},
    )

    # Assert
    assert r.status_code == 200

    updated_unit = await graphql_client.get_org_unit_timeline(unit_uuid, None, None)
    validities = one(updated_unit.objects).validities

    updated_postal_address = await graphql_client.get_address_timeline(
        AddressFilter(
            uuids=[postal_address_uuid],
            from_date=None,
            to_date=None,
        )
    )
    postal_address_validities = one(updated_postal_address.objects).validities

    # Check the unit in "assert interval 1"
    validity = validities[0]
    assert validity.validity.from_ == t1
    assert _mo_end_to_timeline_end(validity.validity.to) == t2
    assert validity.name == "name4"
    assert validity.user_key == "II-ABCD"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "NY0-niveau"
    assert validity.parent is not None
    assert validity.parent.uuid == OrgUnitUUID("10000000-0000-0000-0000-000000000000")

    # Check the addresses in "assert interval 1"
    postal_address_validity = postal_address_validities[0]
    assert postal_address_validity.validity.from_ == t1
    assert _mo_end_to_timeline_end(postal_address_validity.validity.to) == t2
    assert postal_address_validity.user_key == "AdresseAPOSOrgUnit"
    assert postal_address_validity.value == "Kung FU Street, 1000, Andeby"
    assert postal_address_validity.address_type.uuid == postal_address_type_uuid

    # Check the unit in "assert interval 2"
    validity = validities[1]
    assert validity.validity.from_ == t3
    assert _mo_end_to_timeline_end(validity.validity.to) == t4
    assert validity.name == "name4"
    assert validity.user_key == "II-ABCD"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "NY0-niveau"
    assert validity.parent is not None
    assert validity.parent.uuid == OrgUnitUUID("10000000-0000-0000-0000-000000000000")

    # Check the addresses in "assert interval 2"
    postal_address_validity = postal_address_validities[1]
    assert postal_address_validity.validity.from_ == t3
    assert _mo_end_to_timeline_end(postal_address_validity.validity.to) == t4
    assert postal_address_validity.user_key == "AdresseAPOSOrgUnit"
    assert postal_address_validity.value == "Kung FU Street, 1000, Andeby"
    assert postal_address_validity.address_type.uuid == postal_address_type_uuid

    assert len(validities) == 2
    assert len(postal_address_validities) == 2


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "MODE": "region",
        "UNKNOWN_UNIT": str(UNKNOWN_UNIT),
        "APPLY_NY_LOGIC": "false",
        "MO_SUBTREE_PATHS_FOR_ROOT": '{"II": ["12121212-1212-1212-1212-121212121212", "10000000-0000-0000-0000-000000000000"]}',
    }
)
async def test_ou_timeline_create_new_unit(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,  # Maybe switch
    org_unit_type: OrgUnitUUID,
    org_unit_levels: dict[str, OrgUnitLevelUUID],
    base_tree_builder: TestingCreateOrgUnitOrgUnitCreate,
    sd_parent_history_resp: list[dict[str, str]],
    respx_mock: MockRouter,
):
    """
    We are testing this scenario:

    Time  --------t1-------------------t3----------------------------------t7------>

    MO (unit does not exist)

    SD (name)     |-------------------------name1--------------------------|
    SD (id)       |-------------------------ABCD---------------------------|
    SD (level)    |-------------------------NY0----------------------------|
    SD (parent)   |--------dep3--------|-------------dep4------------------|

    "Assert"      |---------1----------|--------------2--------------------|
    intervals
    """
    # Arrange
    tz = ZoneInfo("Europe/Copenhagen")

    t1 = datetime(2001, 1, 1, tzinfo=tz)
    t3 = datetime(2003, 1, 1, tzinfo=tz)
    t7 = datetime(2007, 1, 1, tzinfo=tz)

    unit_uuid = UUID("11111111-1111-1111-1111-111111111111")

    sd_dep_resp = f"""<?xml version="1.0" encoding="UTF-8"?>
        <GetDepartment20111201 creationDateTime="2025-02-18T10:41:08">
          <RequestStructure>
            <InstitutionIdentifier>II</InstitutionIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <ActivationDate>1930-02-18</ActivationDate>
            <DeactivationDate>9999-12-31</DeactivationDate>
            <ContactInformationIndicator>false</ContactInformationIndicator>
            <DepartmentNameIndicator>true</DepartmentNameIndicator>
            <EmploymentDepartmentIndicator>false</EmploymentDepartmentIndicator>
            <PostalAddressIndicator>false</PostalAddressIndicator>
            <ProductionUnitIndicator>false</ProductionUnitIndicator>
            <UUIDIndicator>true</UUIDIndicator>
          </RequestStructure>
          <RegionIdentifier>RI</RegionIdentifier>
          <RegionUUIDIdentifier>838b8691-7785-4f64-a83a-b383567dd171</RegionUUIDIdentifier>
          <InstitutionIdentifier>II</InstitutionIdentifier>
          <InstitutionUUIDIdentifier>d6024493-a920-4040-9876-9faaae88efc1</InstitutionUUIDIdentifier>
          <Department>
            <ActivationDate>2001-01-01</ActivationDate>
            <DeactivationDate>2006-12-31</DeactivationDate>
            <DepartmentIdentifier>ABCD</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>NY0-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name1</DepartmentName>
          </Department>
        </GetDepartment20111201>
    """

    respx_mock.get(
        f"https://service.sd.dk/sdws/GetDepartment20111201?InstitutionIdentifier=II&DepartmentUUIDIdentifier={str(unit_uuid)}&ActivationDate=01.01.0001&DeactivationDate=31.12.9999&ContactInformationIndicator=False&DepartmentNameIndicator=True&PostalAddressIndicator=False&UUIDIndicator=True"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content=sd_dep_resp,
    )

    respx_mock.get(
        f"https://service.sd.dk/api-gateway/organization/public/api/v1/organizations/uuids/{str(unit_uuid)}/department-parent-history"
    ).respond(
        json=sd_parent_history_resp,
    )

    # Act
    r = await test_client.post(
        "/timeline/sync/ou",
        json={"institution_identifier": "II", "org_unit": str(unit_uuid)},
    )

    # Assert
    assert r.status_code == 200

    updated_unit = await graphql_client.get_org_unit_timeline(unit_uuid, None, None)
    validities = one(updated_unit.objects).validities

    assert len(validities) == 2

    validity = validities[0]
    assert validity.validity.from_ == t1
    assert _mo_end_to_timeline_end(validity.validity.to) == t3
    assert validity.name == "name1"
    assert validity.user_key == "II-ABCD"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "NY0-niveau"
    assert validity.parent is not None
    assert validity.parent.uuid == OrgUnitUUID("30000000-0000-0000-0000-000000000000")

    validity = validities[1]
    assert validity.validity.from_ == t3
    assert _mo_end_to_timeline_end(validity.validity.to) == t7
    assert validity.name == "name1"
    assert validity.user_key == "II-ABCD"
    assert validity.org_unit_level is not None
    assert validity.org_unit_level.name == "NY0-niveau"
    assert validity.parent is not None
    assert validity.parent.uuid == OrgUnitUUID("40000000-0000-0000-0000-000000000000")


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "MODE": "region",
        "UNKNOWN_UNIT": str(UNKNOWN_UNIT),
        "APPLY_NY_LOGIC": "false",
        "MO_SUBTREE_PATHS_FOR_ROOT": '{"II": ["12121212-1212-1212-1212-121212121212", "10000000-0000-0000-0000-000000000000"]}',
    }
)
async def test_ou_timeline_skip_create_new_unit_when_missing_data_from_sd(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,  # Maybe switch
    org_unit_type: OrgUnitUUID,
    org_unit_levels: dict[str, OrgUnitLevelUUID],
    base_tree_builder: TestingCreateOrgUnitOrgUnitCreate,
    sd_parent_history_resp: list[dict[str, str]],
    respx_mock: MockRouter,
):
    """
    We are testing the scenario where an org unit is not created when there are
    data missing in the SD timeline.

    Time  ------------------------------------------------------------------------->

    MO (unit does not exist)

    SD (name)     |-------------------------name1-----------------------------------
    SD (id)       |-------------------------ABCD------------------------------------
    SD (level)    |-------------------------NY0-------------------------------------
    SD (parent)                           MISSING!
    """
    # Arrange
    unit_uuid = UUID("11111111-1111-1111-1111-111111111111")

    sd_dep_resp = f"""<?xml version="1.0" encoding="UTF-8"?>
        <GetDepartment20111201 creationDateTime="2025-02-18T10:41:08">
          <RequestStructure>
            <InstitutionIdentifier>II</InstitutionIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <ActivationDate>1930-02-18</ActivationDate>
            <DeactivationDate>9999-12-31</DeactivationDate>
            <ContactInformationIndicator>false</ContactInformationIndicator>
            <DepartmentNameIndicator>true</DepartmentNameIndicator>
            <EmploymentDepartmentIndicator>false</EmploymentDepartmentIndicator>
            <PostalAddressIndicator>false</PostalAddressIndicator>
            <ProductionUnitIndicator>false</ProductionUnitIndicator>
            <UUIDIndicator>true</UUIDIndicator>
          </RequestStructure>
          <RegionIdentifier>RI</RegionIdentifier>
          <RegionUUIDIdentifier>838b8691-7785-4f64-a83a-b383567dd171</RegionUUIDIdentifier>
          <InstitutionIdentifier>II</InstitutionIdentifier>
          <InstitutionUUIDIdentifier>d6024493-a920-4040-9876-9faaae88efc1</InstitutionUUIDIdentifier>
          <Department>
            <ActivationDate>2001-01-01</ActivationDate>
            <DeactivationDate>2006-12-31</DeactivationDate>
            <DepartmentIdentifier>ABCD</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>NY0-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name1</DepartmentName>
          </Department>
        </GetDepartment20111201>
    """

    respx_mock.get(
        f"https://service.sd.dk/sdws/GetDepartment20111201?InstitutionIdentifier=II&DepartmentUUIDIdentifier={str(unit_uuid)}&ActivationDate=01.01.0001&DeactivationDate=31.12.9999&ContactInformationIndicator=False&DepartmentNameIndicator=True&PostalAddressIndicator=False&UUIDIndicator=True"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content=sd_dep_resp,
    )

    respx_mock.get(
        f"https://service.sd.dk/api-gateway/organization/public/api/v1/organizations/uuids/{str(unit_uuid)}/department-parent-history"
    ).respond(
        json=[],  # No parent info!
    )

    # Act
    r = await test_client.post(
        "/timeline/sync/ou",
        json={"institution_identifier": "II", "org_unit": str(unit_uuid)},
    )

    # Assert
    assert r.status_code == 200

    mo_org_unit = await graphql_client.get_org_unit_timeline(unit_uuid, None, None)
    assert mo_org_unit.objects == []


@pytest.mark.integration_test
@pytest.mark.envvar(
    {
        "MODE": "region",
        "UNKNOWN_UNIT": str(UNKNOWN_UNIT),
        "APPLY_NY_LOGIC": "false",
        "MO_SUBTREE_PATHS_FOR_ROOT": '{"II": ["12121212-1212-1212-1212-121212121212", "10000000-0000-0000-0000-000000000000"]}',
    }
)
async def test_ou_timeline_sync_filter(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,  # Maybe switch
    org_unit_type: OrgUnitUUID,
    org_unit_levels: dict[str, OrgUnitLevelUUID],
    base_tree_builder: TestingCreateOrgUnitOrgUnitCreate,
    sd_parent_history_resp: list[dict[str, str]],
    respx_mock: MockRouter,
):
    """
    We are testing that the OU sync filter skips units which are not placed in the
    right part of the OU tree. We try to sync the "Unknown" unit which is outside the
    path provided by MO_SUBTREE_PATHS_FOR_ROOT. The unit should be skipped and we
    assert that it is still found in MO.
    """

    # Arrange
    sd_dep_resp = """<?xml version="1.0" encoding="UTF-8"?>
        <Envelope>
          <Body>
            <Fault>
              <faultcode>soapenv:soapenvClient.ParameterError</faultcode>
              <faultstring>DepartmentUUIDIdentifier  was not found.</faultstring>
              <faultactor>dk.eg.sd.loen.webservices.web.sdws.BusinessHandler.qm.GetDepartment20111201BO</faultactor>
              <detail>
                <string>Missing or invalid parameter from client: "DepartmentUUIDIdentifier  was not found."</string>
              </detail>
            </Fault>
          </Body>
        </Envelope>
    """

    respx_mock.get(
        f"https://service.sd.dk/sdws/GetDepartment20111201?InstitutionIdentifier=II&DepartmentUUIDIdentifier={str(UNKNOWN_UNIT)}&ActivationDate=01.01.0001&DeactivationDate=31.12.9999&ContactInformationIndicator=False&DepartmentNameIndicator=True&PostalAddressIndicator=False&UUIDIndicator=True"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content=sd_dep_resp,
    )

    # Act
    r = await test_client.post(
        "/timeline/sync/ou",
        json={"institution_identifier": "II", "org_unit": str(UNKNOWN_UNIT)},
    )

    # Assert
    assert r.status_code == 200

    updated_unit = await graphql_client.get_org_unit_timeline(UNKNOWN_UNIT, None, None)
    validities = one(updated_unit.objects).validities

    # We assert that the unit still exists
    assert len(validities) == 1
