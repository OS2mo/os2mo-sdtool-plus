# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from uuid import UUID
from zoneinfo import ZoneInfo

import pytest
from httpx import AsyncClient
from more_itertools import one
from respx import MockRouter

from sdtoolplus.autogenerated_graphql_client import OrganisationUnitUpdateInput
from sdtoolplus.autogenerated_graphql_client import RAValidityInput
from sdtoolplus.autogenerated_graphql_client import TestingCreateOrgUnitOrgUnitCreate
from sdtoolplus.depends import GraphQLClient
from sdtoolplus.mo.timeline import _mo_end_datetime
from sdtoolplus.mo_org_unit_importer import OrgUnitUUID


@pytest.mark.integration_test
async def test_ou_timeline_http_triggered_sync(
    test_client: AsyncClient,
    graphql_client: GraphQLClient,  # Maybe switch
    org_unit_type: OrgUnitUUID,
    base_tree_builder: TestingCreateOrgUnitOrgUnitCreate,
    respx_mock: MockRouter,
):
    """
    We are testing this scenario:

    Time: --------t1--------t2---------t3------t4-----t5-------------------t6------->
    SD:           |-------name1--------|----name2-----|-------name3--------|
    MO:                     |------name4-------|---------------name5-----------------
    """
    # Arrange
    tz = ZoneInfo("Europe/Copenhagen")

    t1 = datetime(1990, 1, 1, tzinfo=tz)
    t2 = datetime(1999, 1, 1, tzinfo=tz)
    t3 = datetime(2003, 1, 1, tzinfo=tz)
    t4 = datetime(2004, 1, 1, tzinfo=tz)
    t5 = datetime(2005, 1, 1, tzinfo=tz)
    t6 = datetime(2006, 1, 1, tzinfo=tz)

    unit_uuid = UUID("11111111-1111-1111-1111-111111111111")

    await graphql_client._testing__create_org_unit(
        uuid=unit_uuid,
        name="name4",
        user_key="name",
        org_unit_type=org_unit_type,
        from_date=t2,
        parent=OrgUnitUUID("12121212-1212-1212-1212-121212121212"),  # Root
    )

    await graphql_client.update_org_unit(
        OrganisationUnitUpdateInput(
            uuid=unit_uuid,
            name="name5",
            validity=RAValidityInput(
                from_=t4,
                to=None,
            ),
        )
    )

    sd_resp = f"""<?xml version="1.0" encoding="UTF-8"?>
        <GetDepartment20111201 creationDateTime="2025-02-18T10:41:08">
          <RequestStructure>
            <InstitutionIdentifier>II</InstitutionIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <ActivationDate>1930-02-18</ActivationDate>
            <DeactivationDate>9999-12-31</DeactivationDate>
            <ContactInformationIndicator>false</ContactInformationIndicator>
            <DepartmentNameIndicator>true</DepartmentNameIndicator>
            <EmploymentDepartmentIndicator>false</EmploymentDepartmentIndicator>
            <PostalAddressIndicator>false</PostalAddressIndicator>
            <ProductionUnitIndicator>false</ProductionUnitIndicator>
            <UUIDIndicator>true</UUIDIndicator>
          </RequestStructure>
          <RegionIdentifier>RI</RegionIdentifier>
          <RegionUUIDIdentifier>838b8691-7785-4f64-a83a-b383567dd171</RegionUUIDIdentifier>
          <InstitutionIdentifier>II</InstitutionIdentifier>
          <InstitutionUUIDIdentifier>d6024493-a920-4040-9876-9faaae88efc1</InstitutionUUIDIdentifier>
          <Department>
            <ActivationDate>1990-01-01</ActivationDate>
            <DeactivationDate>2002-12-31</DeactivationDate>
            <DepartmentIdentifier>ABCD</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>Afdelings-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name1</DepartmentName>
          </Department>
          <Department>
            <ActivationDate>2003-01-01</ActivationDate>
            <DeactivationDate>2004-12-31</DeactivationDate>
            <DepartmentIdentifier>ABCD</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>Afdelings-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name2</DepartmentName>
          </Department>
          <Department>
            <ActivationDate>2005-01-01</ActivationDate>
            <DeactivationDate>2005-12-31</DeactivationDate>
            <DepartmentIdentifier>ABCD</DepartmentIdentifier>
            <DepartmentUUIDIdentifier>{str(unit_uuid)}</DepartmentUUIDIdentifier>
            <DepartmentLevelIdentifier>Afdelings-niveau</DepartmentLevelIdentifier>
            <DepartmentName>name3</DepartmentName>
          </Department>
        </GetDepartment20111201>
    """

    respx_mock.get(
        f"https://service.sd.dk/sdws/GetDepartment20111201?InstitutionIdentifier=II&DepartmentUUIDIdentifier={str(unit_uuid)}&ActivationDate=01.01.1&DeactivationDate=31.12.9999&DepartmentNameIndicator=True&PostalAddressIndicator=False&UUIDIndicator=True"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content=sd_resp,
    )

    # Act
    r = await test_client.post(
        "/timeline/sync/ou", params={"inst_id": "II", "org_unit": str(unit_uuid)}
    )

    # Assert
    assert r.status_code == 200

    updated_unit = await graphql_client.get_org_unit_timeline(unit_uuid)
    validities = one(updated_unit.objects).validities

    assert len(validities) == 3

    assert validities[0].validity.from_ == t1
    assert _mo_end_datetime(validities[0].validity.to, tz) == t3
    assert validities[0].name == "name1"

    assert validities[1].validity.from_ == t3
    assert _mo_end_datetime(validities[1].validity.to, tz) == t5
    assert validities[1].name == "name2"

    assert validities[2].validity.from_ == t5
    assert _mo_end_datetime(validities[2].validity.to, tz) == t6
    assert validities[2].name == "name3"
