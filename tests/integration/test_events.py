# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0

from datetime import date
from datetime import datetime
from uuid import UUID
from uuid import uuid4

import pytest
from fastapi import Depends
from fastapi import FastAPI
from fastapi.testclient import TestClient
from fastramqpi.pytest_util import retry
from freezegun import freeze_time
from httpx import AsyncClient
from more_itertools import one
from respx import MockRouter

from sdtoolplus.autogenerated_graphql_client import EmployeeCreateInput
from sdtoolplus.autogenerated_graphql_client import EmployeeFilter
from sdtoolplus.autogenerated_graphql_client import EngagementCreateInput
from sdtoolplus.autogenerated_graphql_client import OrganisationUnitCreateInput
from sdtoolplus.autogenerated_graphql_client import RAValidityInput
from sdtoolplus.autogenerated_graphql_client import TestingCreateOrgUnitOrgUnitCreate
from sdtoolplus.depends import GraphQLClient
from sdtoolplus.events import sd_api_open
from sdtoolplus.mo.timelines.engagement import get_engagement_filter
from sdtoolplus.mo.timelines.engagement import get_engagement_types
from sdtoolplus.mo_org_unit_importer import OrgUnitLevelUUID
from sdtoolplus.models import EngType
from sdtoolplus.types import CPRNumber
from tests.integration.conftest import UNKNOWN_UNIT


@pytest.mark.envvar(
    {
        "MODE": "region",
        "UNKNOWN_UNIT": str(UNKNOWN_UNIT),
        "APPLY_NY_LOGIC": "false",
        "EVENT_BASED_SYNC": "true",
        "MO_SUBTREE_PATHS_FOR_ROOT": '{"II": ["12121212-1212-1212-1212-121212121212", "10000000-0000-0000-0000-000000000000"]}',
    }
)
@pytest.mark.integration_test
async def test_reconcile_person_and_related_objects(
    respx_mock: MockRouter,
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    base_tree_builder: TestingCreateOrgUnitOrgUnitCreate,
    job_function_5678: UUID,
    job_function_9000: UUID,
) -> None:
    """Test that changes in MO are reconciled.

    This is a simple smoke-test to ensure that the GraphQL event system is
    properly configured.
    """
    person_cpr = CPRNumber("0101011234")
    employment_identifier = "12345"
    engagement_user_key = f"II-{employment_identifier}"

    # Ensure that the person does not exist yet
    mo_person = await graphql_client.get_person(cpr=person_cpr)
    assert mo_person.objects == []

    # Configure SD API GetPerson mock
    today_sd_format = date.strftime(date.today(), "%Y-%m-%d")
    today_url_format = date.strftime(date.today(), "%d.%m.%Y")
    respx_mock.get(
        f"https://service.sd.dk/sdws/GetPerson20111201?InstitutionIdentifier=II&EffectiveDate={today_url_format}&PersonCivilRegistrationIdentifier={person_cpr}&StatusActiveIndicator=True&StatusPassiveIndicator=True&ContactInformationIndicator=True&PostalAddressIndicator=True"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content=f"""<?xml version="1.0" encoding="UTF-8" ?>
            <GetPerson20111201 creationDateTime="2025-04-09T09:47:55">
                <RequestStructure>
                    <InstitutionIdentifier>II</InstitutionIdentifier>
                    <PersonCivilRegistrationIdentifier>0101011234</PersonCivilRegistrationIdentifier>
                    <EffectiveDate>{today_sd_format}</EffectiveDate>
                    <StatusActiveIndicator>true</StatusActiveIndicator>
                    <StatusPassiveIndicator>false</StatusPassiveIndicator>
                    <ContactInformationIndicator>false</ContactInformationIndicator>
                    <PostalAddressIndicator>false</PostalAddressIndicator>
                </RequestStructure>
                <Person>
                    <PersonCivilRegistrationIdentifier>0101011234</PersonCivilRegistrationIdentifier>
                    <PersonGivenName>Chuck</PersonGivenName>
                    <PersonSurnameName>Norris</PersonSurnameName>
                    <Employment>
                        <EmploymentIdentifier>{employment_identifier}</EmploymentIdentifier>
                    </Employment>
                </Person>
            </GetPerson20111201>
        """,
    )

    # Create person with the wrong name
    person_uuid = (
        await graphql_client.create_person(
            input=EmployeeCreateInput(
                cpr_number=person_cpr,
                given_name="RECONCILE",
                surname="ME",
            )
        )
    ).uuid

    # Ensure that the name is reconciled
    @retry()  # type: ignore[no-redef]
    async def verify() -> None:
        mo_person = await graphql_client.get_person_timeline(
            filter=EmployeeFilter(
                cpr_numbers=[person_cpr],
                from_date=None,
                to_date=None,
            )
        )
        validities = one(mo_person.objects).validities
        names = {(v.given_name, v.surname) for v in validities}
        assert names == {("RECONCILE", "ME"), ("Chuck", "Norris")}

    await verify()

    # Configure SD API GetEmploymentChanged mock
    respx_mock.get(
        "https://service.sd.dk/sdws/GetEmploymentChanged20111201?InstitutionIdentifier=II&PersonCivilRegistrationIdentifier=0101011234&EmploymentIdentifier=12345&ActivationDate=01.01.0001&DeactivationDate=31.12.9999&DepartmentIndicator=True&EmploymentStatusIndicator=True&ProfessionIndicator=True&SalaryAgreementIndicator=False&SalaryCodeGroupIndicator=False&WorkingTimeIndicator=True&UUIDIndicator=True"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content="""<?xml version="1.0" encoding="UTF-8"?>
        <GetEmploymentChanged20111201 creationDateTime="2025-03-10T13:50:06">
          <RequestStructure>
            <InstitutionIdentifier>II</InstitutionIdentifier>
            <PersonCivilRegistrationIdentifier>0101011234</PersonCivilRegistrationIdentifier>
            <ActivationDate>2000-01-01</ActivationDate>
            <DeactivationDate>2006-12-31</DeactivationDate>
            <DepartmentIndicator>true</DepartmentIndicator>
            <EmploymentStatusIndicator>true</EmploymentStatusIndicator>
            <ProfessionIndicator>true</ProfessionIndicator>
            <SalaryAgreementIndicator>false</SalaryAgreementIndicator>
            <SalaryCodeGroupIndicator>false</SalaryCodeGroupIndicator>
            <WorkingTimeIndicator>false</WorkingTimeIndicator>
            <UUIDIndicator>true</UUIDIndicator>
          </RequestStructure>
          <Person>
            <PersonCivilRegistrationIdentifier>0101011234</PersonCivilRegistrationIdentifier>
            <Employment>
              <EmploymentIdentifier>12345</EmploymentIdentifier>
              <EmploymentDate>2000-01-01</EmploymentDate>
              <AnniversaryDate>2000-01-01</AnniversaryDate>
              <EmploymentDepartment>
                <ActivationDate>2000-01-01</ActivationDate>
                <DeactivationDate>9999-12-31</DeactivationDate>
                <DepartmentIdentifier>dep1</DepartmentIdentifier>
                <DepartmentUUIDIdentifier>10000000-0000-0000-0000-000000000000</DepartmentUUIDIdentifier>
              </EmploymentDepartment>
              <Profession>
                <ActivationDate>2000-01-01</ActivationDate>
                <DeactivationDate>9999-12-31</DeactivationDate>
                <JobPositionIdentifier>9000</JobPositionIdentifier>
                <EmploymentName>name4</EmploymentName>
                <AppointmentCode>0</AppointmentCode>
              </Profession>
              <EmploymentStatus>
                <ActivationDate>2000-01-01</ActivationDate>
                <DeactivationDate>9999-12-31</DeactivationDate>
                <EmploymentStatusCode>1</EmploymentStatusCode>
              </EmploymentStatus>
              <WorkingTime>
                <ActivationDate>2000-01-01</ActivationDate>
                <DeactivationDate>9999-12-31</DeactivationDate>
                <OccupationRate>1.0000</OccupationRate>
                <SalaryRate>1.0000</SalaryRate>
                <SalariedIndicator>true</SalariedIndicator>
                <FullTimeIndicator>true</FullTimeIndicator>
              </WorkingTime>
            </Employment>
          </Person>
        </GetEmploymentChanged20111201>
    """,
    )

    # Create engagement with the wrong job function
    engagement_types = await get_engagement_types(graphql_client)
    await graphql_client.create_engagement(
        EngagementCreateInput(
            user_key=engagement_user_key,
            validity=RAValidityInput(from_=datetime(2000, 1, 1), to=None),
            person=person_uuid,
            org_unit=UUID("10000000-0000-0000-0000-000000000000"),
            engagement_type=engagement_types[EngType.MONTHLY_FULL_TIME],
            job_function=job_function_5678,
        )
    )

    # Ensure that the org unit is reconciled
    @retry()  # type: ignore[no-redef]
    async def verify() -> None:
        mo_engagement = await graphql_client.get_engagement_timeline(
            get_engagement_filter(
                person=person_uuid,
                user_key=engagement_user_key,
                from_date=None,
                to_date=None,
            )
        )
        validities = one(mo_engagement.objects).validities
        job_function_uuids = {v.job_function_uuid for v in validities}
        assert job_function_uuids == {job_function_9000}

    await verify()

    # TODO: verify address sync


@pytest.mark.envvar(
    {
        "MODE": "region",
        "UNKNOWN_UNIT": str(UNKNOWN_UNIT),
        "APPLY_NY_LOGIC": "false",
        "EVENT_BASED_SYNC": "true",
        "MO_SUBTREE_PATHS_FOR_ROOT": '{"II": ["12121212-1212-1212-1212-121212121212", "10000000-0000-0000-0000-000000000000"]}',
    }
)
@pytest.mark.integration_test
async def test_reconcile_org_unit_and_related_objects(
    respx_mock: MockRouter,
    test_client: AsyncClient,
    graphql_client: GraphQLClient,
    base_tree_builder: TestingCreateOrgUnitOrgUnitCreate,
    org_unit_type: UUID,
    org_unit_levels: dict[str, OrgUnitLevelUUID],
) -> None:
    """Test that changes in MO are reconciled.

    This is a simple smoke-test to ensure that the GraphQL event system is
    properly configured.
    """
    org_unit_uuid = uuid4()

    # Configure SD API GetDepartment mock
    respx_mock.get(
        f"https://service.sd.dk/sdws/GetDepartment20111201?InstitutionIdentifier=II&DepartmentUUIDIdentifier={org_unit_uuid}&ActivationDate=01.01.0001&DeactivationDate=31.12.9999&ContactInformationIndicator=True&DepartmentNameIndicator=True&PostalAddressIndicator=True&ProductionUnitIndicator=True&UUIDIndicator=True"
    ).respond(
        content_type="text/xml;charset=UTF-8",
        content=f"""<?xml version="1.0" encoding="UTF-8"?>
            <GetDepartment20111201 creationDateTime="2025-02-18T10:41:08">
                <RequestStructure>
                    <InstitutionIdentifier>II</InstitutionIdentifier>
                    <DepartmentUUIDIdentifier>{org_unit_uuid}</DepartmentUUIDIdentifier>
                    <ActivationDate>1930-02-18</ActivationDate>
                    <DeactivationDate>9999-12-31</DeactivationDate>
                    <ContactInformationIndicator>false</ContactInformationIndicator>
                    <DepartmentNameIndicator>true</DepartmentNameIndicator>
                    <EmploymentDepartmentIndicator>false</EmploymentDepartmentIndicator>
                    <PostalAddressIndicator>false</PostalAddressIndicator>
                    <ProductionUnitIndicator>false</ProductionUnitIndicator>
                    <UUIDIndicator>true</UUIDIndicator>
                </RequestStructure>
                <RegionIdentifier>RI</RegionIdentifier>
                <RegionUUIDIdentifier>838b8691-7785-4f64-a83a-b383567dd171</RegionUUIDIdentifier>
                <InstitutionIdentifier>II</InstitutionIdentifier>
                <InstitutionUUIDIdentifier>d6024493-a920-4040-9876-9faaae88efc1</InstitutionUUIDIdentifier>
                <Department>
                    <ActivationDate>2001-01-01</ActivationDate>
                    <DeactivationDate>9999-12-31</DeactivationDate>
                    <DepartmentIdentifier>ABCD</DepartmentIdentifier>
                    <DepartmentUUIDIdentifier>{org_unit_uuid}</DepartmentUUIDIdentifier>
                    <DepartmentLevelIdentifier>NY0-niveau</DepartmentLevelIdentifier>
                    <DepartmentName>name1</DepartmentName>
                </Department>
            </GetDepartment20111201>
        """,
    )
    # Configure SD API department-parent-history mock
    respx_mock.get(
        f"https://service.sd.dk/api-gateway/organization/public/api/v1/organizations/uuids/{org_unit_uuid}/department-parent-history"
    ).respond(
        json=[
            {
                "startDate": "2001-01-01",
                "endDate": "9999-12-31",
                "parentUuid": "10000000-0000-0000-0000-000000000000",
            },
        ],
    )

    # Create org unit with the wrong name
    org_unit_uuid = (
        await graphql_client.create_org_unit(
            input=OrganisationUnitCreateInput(
                uuid=org_unit_uuid,
                validity=RAValidityInput(from_=datetime(2000, 1, 1), to=None),
                name="RECONCILE ME",
                user_key="II-ABCD",
                parent=UUID("10000000-0000-0000-0000-000000000000"),
                org_unit_type=org_unit_type,
                org_unit_level=org_unit_levels["Afdelings-niveau"],
            )
        )
    ).uuid

    # Ensure that the name is reconciled
    @retry()
    async def verify() -> None:
        mo_org_unit = await graphql_client.get_org_unit_timeline(
            unit_uuid=org_unit_uuid,
            from_date=None,
            to_date=None,
        )
        validities = one(mo_org_unit.objects).validities
        names = {v.name for v in validities}
        assert names == {"name1"}

    await verify()

    # TODO: verify address sync


@pytest.mark.parametrize(
    "d, status_code, retry_after",
    [
        ("2025-01-01T21:30:00+01:00", 200, None),
        ("2025-01-01T22:30:00+01:00", 503, "27000"),
        ("2025-01-01T00:30:00+01:00", 503, "19800"),
        ("2025-01-01T06:30:00+01:00", 200, None),
    ],
)
async def test_retry_after_when_sd_api_is_closed(
    d: str,
    status_code: int,
    retry_after: str | None,
) -> None:
    """Tests the sd_api_open dependency in isolation."""
    app = FastAPI()

    @app.post("/endpoint", dependencies=[Depends(sd_api_open)])
    async def endpoint() -> None:
        return

    with TestClient(app) as client:
        with freeze_time(d):
            r = client.post("/endpoint")
            assert r.status_code == status_code
            assert r.headers.get("Retry-After") == retry_after
