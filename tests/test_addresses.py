# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from unittest.mock import MagicMock
from unittest.mock import patch
from uuid import uuid4

from more_itertools import one
from ramodels.mo import Validity

from sdtoolplus.addresses import _get_unit_address
from sdtoolplus.autogenerated_graphql_client.get_address_timeline import (
    GetAddressTimelineAddresses,
)
from sdtoolplus.autogenerated_graphql_client.get_address_timeline import (
    GetAddressTimelineAddressesObjectsValidities,
)
from sdtoolplus.autogenerated_graphql_client.get_address_timeline import (
    GetAddressTimelineAddressesObjectsValiditiesAddressType,
)
from sdtoolplus.config import TIMEZONE
from sdtoolplus.mo_org_unit_importer import Address
from sdtoolplus.mo_org_unit_importer import AddressType
from sdtoolplus.mo_org_unit_importer import OrgUnitNode
from sdtoolplus.models import AddressTypeUserKey
from sdtoolplus.timeline import find_address_actions


@patch("sdtoolplus.addresses.logger")
def test_get_unit_address_logs_error_for_multiple_addr_types(
    mock_logger: MagicMock, sd_expected_validity: Validity
):
    # Arrange
    addresses = [
        Address(
            name="Hovedgaden 1, 1000 Andeby",
            address_type=AddressType(user_key=AddressTypeUserKey.POSTAL_ADDR.value),
        ),
        Address(
            name="123456789",
            address_type=AddressType(user_key=AddressTypeUserKey.PNUMBER_ADDR.value),
        ),
        Address(
            name="123456789",
            address_type=AddressType(user_key=AddressTypeUserKey.PNUMBER_ADDR.value),
        ),
    ]
    org_unit_uuid = uuid4()

    org_unit_node = OrgUnitNode(
        uuid=org_unit_uuid,
        parent_uuid=uuid4(),
        user_key="dep1",
        parent=None,
        name="Department 1",
        org_unit_level_uuid=uuid4(),
        addresses=addresses,
        validity=sd_expected_validity,
    )

    # Act
    addr = _get_unit_address(org_unit_node, AddressTypeUserKey.PNUMBER_ADDR.value)

    # Assert
    assert addr is None

    mock_logger.error.assert_called_once()
    assert mock_logger.error.call_args_list[0].kwargs["org_unit_uuid"] == str(
        org_unit_uuid
    )


address_type = GetAddressTimelineAddressesObjectsValiditiesAddressType(
    uuid=uuid4(),
    name="adressetype",
    user_key="A1",
)


def test_find_actions_noop():
    mo_values = GetAddressTimelineAddresses(
        objects=[
            {
                "uuid": uuid4(),
                "validities": [
                    GetAddressTimelineAddressesObjectsValidities(
                        uuid=uuid4(),
                        value="1",
                        validity={
                            "from_": datetime(1970, 1, 1, tzinfo=TIMEZONE),
                            "to": None,
                        },
                        visibility_uuid=uuid4(),
                        user_key="1",
                        address_type=address_type,
                    ),
                ],
            }
        ]
    )

    desired_values = ["1"]
    create, terminate = find_address_actions(mo_values, desired_values)

    assert create == terminate == set()


def test_find_actions_new():
    mo_values = GetAddressTimelineAddresses(objects=[])

    desired_values = [1]
    create, terminate = find_address_actions(mo_values, desired_values)

    assert create == {1}
    assert terminate == set()


def test_find_actions_terminate():
    address_uuid = uuid4()

    mo_values = GetAddressTimelineAddresses(
        objects=[
            {
                "uuid": address_uuid,
                "validities": [
                    GetAddressTimelineAddressesObjectsValidities(
                        uuid=address_uuid,
                        value="1",
                        validity={
                            "from_": datetime(1970, 1, 1, tzinfo=TIMEZONE),
                            "to": None,
                        },
                        visibility_uuid=uuid4(),
                        user_key="1",
                        address_type=address_type,
                    ),
                ],
            }
        ]
    )

    desired_values = []
    create, terminate = find_address_actions(mo_values, desired_values)

    assert create == set()
    assert terminate == {address_uuid}


def test_find_actions_update():
    address_uuid = uuid4()

    mo_values = GetAddressTimelineAddresses(
        objects=[
            {
                "uuid": address_uuid,
                "validities": [
                    GetAddressTimelineAddressesObjectsValidities(
                        uuid=address_uuid,
                        value="1",
                        validity={
                            "from_": datetime(2222, 1, 1, tzinfo=TIMEZONE),
                            "to": datetime(2223, 1, 1, tzinfo=TIMEZONE),
                        },
                        visibility_uuid=uuid4(),
                        user_key="1",
                        address_type=address_type,
                    ),
                    GetAddressTimelineAddressesObjectsValidities(
                        uuid=address_uuid,
                        value="2",
                        validity={
                            "from_": datetime(3333, 1, 1, tzinfo=TIMEZONE),
                            "to": None,
                        },
                        visibility_uuid=uuid4(),
                        user_key="1",
                        address_type=address_type,
                    ),
                ],
            }
        ]
    )
    desired_values = ["2", "3"]
    create, terminate = find_address_actions(mo_values, desired_values)

    assert create == {"2", "3"}
    assert terminate == {address_uuid}


def test_find_actions_duplicates():
    address_uuid1 = uuid4()
    address_uuid2 = uuid4()

    mo_values = GetAddressTimelineAddresses(
        objects=[
            {
                "uuid": address_uuid1,
                "validities": [
                    GetAddressTimelineAddressesObjectsValidities(
                        uuid=address_uuid1,
                        value="1",
                        validity={
                            "from_": datetime(1970, 1, 1, tzinfo=TIMEZONE),
                            "to": None,
                        },
                        visibility_uuid=uuid4(),
                        user_key="1",
                        address_type=address_type,
                    ),
                ],
            },
            {
                "uuid": address_uuid2,
                "validities": [
                    GetAddressTimelineAddressesObjectsValidities(
                        uuid=address_uuid2,
                        value="1",
                        validity={
                            "from_": datetime(1970, 1, 1, tzinfo=TIMEZONE),
                            "to": None,
                        },
                        visibility_uuid=uuid4(),
                        user_key="1",
                        address_type=address_type,
                    ),
                ],
            },
        ]
    )
    desired_values = ["1", "1"]
    create, terminate = find_address_actions(mo_values, desired_values)

    assert create == set()
    assert one(terminate) == address_uuid1 or one(terminate) == address_uuid2
