# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from itertools import pairwise

from more_itertools import collapse
from more_itertools import first

from sdtoolplus.autogenerated_graphql_client import GetRelatedUnitsRelatedUnitsObjects
from sdtoolplus.autogenerated_graphql_client import OrganisationUnitFilter
from sdtoolplus.autogenerated_graphql_client import RelatedUnitFilter
from sdtoolplus.depends import GraphQLClient
from sdtoolplus.mo.timeline import _mo_end_to_timeline_end
from sdtoolplus.mo.timeline import datetime_to_mo_end
from sdtoolplus.mo_org_unit_importer import OrgUnitUUID
from sdtoolplus.models import EngagementUnit


def _get_related_units_endpoints(
    objects: list[GetRelatedUnitsRelatedUnitsObjects],
    start: datetime,
    end: datetime,
) -> list[datetime]:
    """
    Get the related unit endpoints timeline datetimes. E.g. in the case of dep3 having
    related units C, D and E as below, the function will return
    [t3, t4, t5, t6, t7, t8] (where t3 and t8 are the provided start and end argument,
    respectively).

    Time  --------t1--------t2----t3--t4--t5--t6--t7--t8-----t9--------------------->
    dep3          |-------------C---------|---E---|
                                      |---D---|
    """
    endpoints = set(
        collapse(
            (validity.validity.from_, _mo_end_to_timeline_end(validity.validity.to))
            for obj in objects
            for validity in obj.validities
        )
    )
    endpoints = endpoints.union({start, end})

    return sorted(endpoint for endpoint in endpoints if start <= endpoint <= end)


def _get_related_unit_at(
    objects: list[GetRelatedUnitsRelatedUnitsObjects],
    unit_uuid: OrgUnitUUID,
    at: datetime,
) -> OrgUnitUUID | None:
    """
    Get a single related unit (or None if no such unit exists) at the given time. If
    there are more than one related unit, we select the first in a list of sorted org
    unit UUIDs
    """
    related_units = sorted(
        org_unit_uuid
        for obj in objects
        for validity in obj.validities
        for org_unit_uuid in validity.org_unit_uuids
        if not org_unit_uuid == unit_uuid
        and validity.validity.from_
        <= at
        < _mo_end_to_timeline_end(validity.validity.to)
    )
    return first(related_units, default=None)


async def related_units(
    gql_client: GraphQLClient,
    unit_uuid: OrgUnitUUID,
    unit_interval: EngagementUnit,
    unknown_unit_uuid: OrgUnitUUID,
) -> list[EngagementUnit]:
    """
    Returns the related units in the given interval (or the "Unknown" unit if no related
    unit can be found). Note that the input interval may be divided into smaller
    intervals.
    """
    mo_rel_units = await gql_client.get_related_units(
        RelatedUnitFilter(
            from_date=unit_interval.start,
            # This to_date is counterintuitive for this OU relation look up,
            # since the to_date is the day *after* the relation potentially
            # ends, but MO requires these dates. Especially since we are not
            # allowed to ask for an OU relation where from_date=to_date, which
            # is the case for a unit_interval lasting only for a single day.
            to_date=datetime_to_mo_end(unit_interval.end),
            org_unit=OrganisationUnitFilter(uuids=[unit_uuid]),
        )
    )

    objects = mo_rel_units.objects

    # Get the related unit interval endpoints as timeline datetimes
    endpoints = _get_related_units_endpoints(
        objects=objects, start=unit_interval.start, end=unit_interval.end
    )
    timeline_related_units = []
    for start, end in pairwise(endpoints):
        timeline_related_unit = _get_related_unit_at(
            objects=objects, unit_uuid=unit_uuid, at=start
        )
        if timeline_related_unit is None:
            timeline_related_unit = unknown_unit_uuid
        assert timeline_related_unit is not None
        timeline_related_units.append(
            EngagementUnit(
                start=start,
                end=end,
                value=timeline_related_unit,
            )
        )

    return timeline_related_units
