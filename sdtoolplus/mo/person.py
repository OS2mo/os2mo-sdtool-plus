# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from uuid import UUID

from sdtoolplus.autogenerated_graphql_client import EmployeeCreateInput
from sdtoolplus.autogenerated_graphql_client import EmployeeUpdateInput
from sdtoolplus.autogenerated_graphql_client import RAValidityInput
from sdtoolplus.depends import GraphQLClient
from sdtoolplus.mo.timelines.common import logger
from sdtoolplus.models import Person


async def create_person(
    gql_client: GraphQLClient,
    cpr: str,
    givenname: str,
    lastname: str,
    dry_run: bool = False,
) -> None:
    logger.info("Create new person", cpr=cpr, givenname=givenname, lastname=lastname)

    employee_input = EmployeeCreateInput(
        cpr_number=cpr,
        given_name=givenname,
        surname=lastname,
    )
    logger.debug("Create person payload", payload=employee_input.dict())
    if not dry_run:
        await gql_client.create_person(input=employee_input)
    logger.debug("Person created", cpr=cpr)


async def update_person(
    gql_client: GraphQLClient,
    uuid: UUID,
    start: datetime,
    person: Person,
    dry_run: bool = False,
) -> None:
    logger.info("Update person")

    payload = EmployeeUpdateInput(
        uuid=uuid,
        cpr_number=person.cpr,
        given_name=person.given_name,
        surname=person.surname,
        validity=RAValidityInput(from_=start, to=None),
    )
    logger.debug("Update person payload", payload=payload.dict())
    if not dry_run:
        await gql_client.update_person(payload)
    logger.debug("Person updated", cpr=person.cpr)
