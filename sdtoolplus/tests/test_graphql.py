# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from unittest.mock import AsyncMock
from unittest.mock import patch
from uuid import uuid4

import pytest

from sdtoolplus.autogenerated_graphql_client import AddressTypes
from sdtoolplus.autogenerated_graphql_client import AddressTypesFacets
from sdtoolplus.autogenerated_graphql_client import AddressTypesFacetsObjects
from sdtoolplus.autogenerated_graphql_client import AddressTypesFacetsObjectsCurrent
from sdtoolplus.autogenerated_graphql_client import (
    AddressTypesFacetsObjectsCurrentClasses,
)
from sdtoolplus.graphql import get_address_type_uuid


@pytest.mark.asyncio
async def test_get_address_type_uuid():
    # Arrange
    postal_addr_uuid = uuid4()
    pnumber_addr_uuid = uuid4()

    mock_gql_client = AsyncMock()
    mock_gql_client.address_types.return_value = AddressTypesFacets(
        objects=[
            AddressTypesFacetsObjects(
                current=AddressTypesFacetsObjectsCurrent(
                    user_key="org_unit_address_type",
                    uuid=uuid4(),
                    classes=[
                        AddressTypesFacetsObjectsCurrentClasses(
                            uuid=postal_addr_uuid,
                            user_key="AddressMailUnit",
                            name="Postadresse",
                        ),
                        AddressTypesFacetsObjectsCurrentClasses(
                            uuid=pnumber_addr_uuid,
                            user_key="Pnummer",
                            name="P-nummer",
                        ),
                    ],
                )
            )
        ]
    )

    # Act
    addr_type_uuid = await get_address_type_uuid(mock_gql_client, "Pnummer")

    # Arrange
    assert addr_type_uuid == pnumber_addr_uuid
