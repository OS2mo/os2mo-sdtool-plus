# Generated by ariadne-codegen on 2024-02-02 13:53
# Source: queries.graphql
from .address_types import AddressTypes
from .address_types import AddressTypesFacets
from .async_base_client import AsyncBaseClient
from .create_address import CreateAddress
from .create_address import CreateAddressAddressCreate
from .input_types import AddressCreateInput
from .input_types import AddressUpdateInput
from .update_address import UpdateAddress
from .update_address import UpdateAddressAddressUpdate


def gql(q: str) -> str:
    return q


class GraphQLClient(AsyncBaseClient):
    async def address_types(self) -> AddressTypesFacets:
        query = gql(
            """
            query AddressTypes {
              facets(filter: {user_keys: "org_unit_address_type"}) {
                objects {
                  current {
                    user_key
                    uuid
                    classes {
                      uuid
                      user_key
                      name
                    }
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return AddressTypes.parse_obj(data).facets

    async def create_address(
        self, input: AddressCreateInput
    ) -> CreateAddressAddressCreate:
        query = gql(
            """
            mutation CreateAddress($input: AddressCreateInput!) {
              address_create(input: $input) {
                current {
                  validity {
                    from
                    to
                  }
                  uuid
                  name
                  address_type {
                    user_key
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"input": input}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CreateAddress.parse_obj(data).address_create

    async def update_address(
        self, input: AddressUpdateInput
    ) -> UpdateAddressAddressUpdate:
        query = gql(
            """
            mutation UpdateAddress($input: AddressUpdateInput!) {
              address_update(input: $input) {
                current {
                  validity {
                    from
                    to
                  }
                  uuid
                  name
                  address_type {
                    user_key
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"input": input}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return UpdateAddress.parse_obj(data).address_update
