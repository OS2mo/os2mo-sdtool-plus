# Generated by ariadne-codegen on 2024-03-12 14:45
# Source: queries.graphql
from datetime import datetime
from typing import Optional
from typing import Union
from uuid import UUID

from ._testing__create_employee import TestingCreateEmployee
from ._testing__create_employee import TestingCreateEmployeeEmployeeCreate
from ._testing__create_engagement import TestingCreateEngagement
from ._testing__create_engagement import TestingCreateEngagementEngagementCreate
from ._testing__create_org_unit import TestingCreateOrgUnit
from ._testing__create_org_unit import TestingCreateOrgUnitOrgUnitCreate
from ._testing__get_facet_class import TestingGetFacetClass
from ._testing__get_facet_class import TestingGetFacetClassClasses
from ._testing__get_org_unit import TestingGetOrgUnit
from ._testing__get_org_unit import TestingGetOrgUnitOrgUnits
from .address_types import AddressTypes
from .address_types import AddressTypesFacets
from .async_base_client import AsyncBaseClient
from .base_model import UNSET
from .base_model import UnsetType
from .create_address import CreateAddress
from .create_address import CreateAddressAddressCreate
from .get_organization import GetOrganization
from .get_organization import GetOrganizationOrg
from .input_types import AddressCreateInput
from .input_types import AddressUpdateInput
from .update_address import UpdateAddress
from .update_address import UpdateAddressAddressUpdate


def gql(q: str) -> str:
    return q


class GraphQLClient(AsyncBaseClient):
    async def get_organization(self) -> GetOrganizationOrg:
        query = gql(
            """
            query GetOrganization {
              org {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return GetOrganization.parse_obj(data).org

    async def address_types(self) -> AddressTypesFacets:
        query = gql(
            """
            query AddressTypes {
              facets(filter: {user_keys: "org_unit_address_type"}) {
                objects {
                  current {
                    user_key
                    uuid
                    classes {
                      uuid
                      user_key
                      name
                    }
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return AddressTypes.parse_obj(data).facets

    async def create_address(
        self, input: AddressCreateInput
    ) -> CreateAddressAddressCreate:
        query = gql(
            """
            mutation CreateAddress($input: AddressCreateInput!) {
              address_create(input: $input) {
                current {
                  validity {
                    from
                    to
                  }
                  uuid
                  name
                  address_type {
                    user_key
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"input": input}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return CreateAddress.parse_obj(data).address_create

    async def update_address(
        self, input: AddressUpdateInput
    ) -> UpdateAddressAddressUpdate:
        query = gql(
            """
            mutation UpdateAddress($input: AddressUpdateInput!) {
              address_update(input: $input) {
                current {
                  validity {
                    from
                    to
                  }
                  uuid
                  name
                  address_type {
                    user_key
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"input": input}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return UpdateAddress.parse_obj(data).address_update

    async def _testing__get_facet_class(
        self, facet_user_key: str, class_user_key: str
    ) -> TestingGetFacetClassClasses:
        query = gql(
            """
            query _Testing_GetFacetClass($facet_user_key: String!, $class_user_key: String!) {
              classes(
                filter: {user_keys: [$class_user_key], facet: {user_keys: [$facet_user_key]}}
              ) {
                objects {
                  current {
                    uuid
                    user_key
                    name
                    scope
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {
            "facet_user_key": facet_user_key,
            "class_user_key": class_user_key,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TestingGetFacetClass.parse_obj(data).classes

    async def _testing__create_employee(
        self, uuid: UUID, given_name: str, surname: str
    ) -> TestingCreateEmployeeEmployeeCreate:
        query = gql(
            """
            mutation _Testing_CreateEmployee($uuid: UUID!, $given_name: String!, $surname: String!) {
              employee_create(
                input: {uuid: $uuid, given_name: $given_name, surname: $surname}
              ) {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {
            "uuid": uuid,
            "given_name": given_name,
            "surname": surname,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TestingCreateEmployee.parse_obj(data).employee_create

    async def _testing__create_org_unit(
        self,
        uuid: UUID,
        name: str,
        user_key: str,
        from_date: datetime,
        org_unit_type: UUID,
        parent: Union[Optional[UUID], UnsetType] = UNSET,
    ) -> TestingCreateOrgUnitOrgUnitCreate:
        query = gql(
            """
            mutation _Testing_CreateOrgUnit($uuid: UUID!, $name: String!, $user_key: String!, $from_date: DateTime!, $org_unit_type: UUID!, $parent: UUID) {
              org_unit_create(
                input: {uuid: $uuid, name: $name, user_key: $user_key, validity: {from: $from_date}, org_unit_type: $org_unit_type, parent: $parent}
              ) {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {
            "uuid": uuid,
            "name": name,
            "user_key": user_key,
            "from_date": from_date,
            "org_unit_type": org_unit_type,
            "parent": parent,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TestingCreateOrgUnit.parse_obj(data).org_unit_create

    async def _testing__get_org_unit(self, uuid: UUID) -> TestingGetOrgUnitOrgUnits:
        query = gql(
            """
            query _Testing_GetOrgUnit($uuid: UUID!) {
              org_units(filter: {uuids: [$uuid]}) {
                objects {
                  current {
                    validity {
                      from
                      to
                    }
                    uuid
                    user_key
                    name
                    parent {
                      uuid
                      name
                    }
                    org_unit_level {
                      uuid
                      user_key
                      name
                    }
                  }
                }
              }
            }
            """
        )
        variables: dict[str, object] = {"uuid": uuid}
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TestingGetOrgUnit.parse_obj(data).org_units

    async def _testing__create_engagement(
        self,
        from_date: datetime,
        org_unit: UUID,
        engagement_type: UUID,
        job_function: UUID,
        person: UUID,
    ) -> TestingCreateEngagementEngagementCreate:
        query = gql(
            """
            mutation _Testing_CreateEngagement($from_date: DateTime!, $org_unit: UUID!, $engagement_type: UUID!, $job_function: UUID!, $person: UUID!) {
              engagement_create(
                input: {validity: {from: $from_date}, org_unit: $org_unit, engagement_type: $engagement_type, job_function: $job_function, person: $person}
              ) {
                uuid
              }
            }
            """
        )
        variables: dict[str, object] = {
            "from_date": from_date,
            "org_unit": org_unit,
            "engagement_type": engagement_type,
            "job_function": job_function,
            "person": person,
        }
        response = await self.execute(query=query, variables=variables)
        data = self.get_data(response)
        return TestingCreateEngagement.parse_obj(data).engagement_create
