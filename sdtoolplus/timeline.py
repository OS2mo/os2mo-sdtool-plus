# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0
from datetime import datetime
from datetime import timedelta

import structlog

from sdtoolplus.autogenerated_graphql_client import OrganisationUnitTerminateInput
from sdtoolplus.autogenerated_graphql_client import OrganisationUnitUpdateInput
from sdtoolplus.autogenerated_graphql_client import RAValidityInput
from sdtoolplus.depends import GraphQLClient
from sdtoolplus.mo_org_unit_importer import OrgUnitUUID
from sdtoolplus.models import Active
from sdtoolplus.models import Interval
from sdtoolplus.models import Timeline
from sdtoolplus.models import UnitName
from sdtoolplus.models import UnitTimeline

logger = structlog.stdlib.get_logger()

# TODO: move MO specific functions to mo.py


def _get_mo_validity(interval: Interval) -> RAValidityInput:
    mo_end: datetime | None = interval.end
    assert mo_end is not None
    if mo_end.replace(tzinfo=None) == datetime.max:
        mo_end = None
    else:
        mo_end = mo_end - timedelta(days=1)  # Subtract one day due to MO
    return RAValidityInput(from_=interval.start, to=mo_end)


async def update_ou_name(
    gql_client: GraphQLClient,
    org_unit: OrgUnitUUID,
    diff_timeline: Timeline[UnitName],
) -> None:
    logger.info("Update OU name in MO")

    update_intervals = tuple(
        unit_name
        for unit_name in diff_timeline.intervals
        if unit_name.value is not None
    )

    for unit_name in update_intervals:
        logger.debug("OU name update", unit_name=unit_name)
        await gql_client.update_org_unit(
            OrganisationUnitUpdateInput(
                uuid=org_unit,
                name=unit_name.value,
                validity=_get_mo_validity(unit_name),
            )
        )


async def terminate_ou(
    gql_client: GraphQLClient,
    org_unit: OrgUnitUUID,
    diff_timeline: Timeline[Active],
) -> None:
    logger.info("(Re-)terminate OU", org_unit=str(org_unit))

    termination_intervals = tuple(
        active for active in diff_timeline.intervals if active.value is None
    )
    logger.debug("Termination intervals", intervals=termination_intervals)

    for active in termination_intervals:
        mo_validity = _get_mo_validity(active)

        if mo_validity.to is not None:
            payload = OrganisationUnitTerminateInput(
                uuid=org_unit,
                from_=mo_validity.from_,
                to=mo_validity.to,
            )
        else:
            payload = OrganisationUnitTerminateInput(
                uuid=org_unit,
                to=mo_validity.from_ - timedelta(days=1),
            )

        await gql_client.terminate_org_unit(payload)


async def update_ou(
    gql_client: GraphQLClient,
    org_unit: OrgUnitUUID,
    sd_unit_timeline: UnitTimeline,
    mo_unit_timeline: UnitTimeline,
    dry_run: bool,
) -> None:
    logger.info("Update OU in MO", org_unit=str(org_unit))

    diff = UnitTimeline(
        active=sd_unit_timeline.active.diff(mo_unit_timeline.active),
        name=sd_unit_timeline.name.diff(mo_unit_timeline.name),
    )
    logger.debug("UnitTimeline diff", diff=diff)

    await update_ou_name(gql_client, org_unit, diff.name)
    await terminate_ou(gql_client, org_unit, diff.active)
