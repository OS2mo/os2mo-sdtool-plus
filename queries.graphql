# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0

query GetOrganization {
  org {
    uuid
  }
}

query AddressTypes {
  facets(filter: {user_keys: "org_unit_address_type"}) {
    objects {
      current {
        user_key
        uuid
        classes {
          uuid
          user_key
          name
        }
      }
    }
  }
}

mutation CreateAddress($input: AddressCreateInput!) {
  address_create(
    input: $input
  ) {
    current {
      validity {
        from
        to
      }
      uuid
      name
      address_type {
        user_key
      }
    }
  }
}

mutation UpdateAddress($input: AddressUpdateInput!) {
  address_update(
    input: $input
  ) {
    current {
      validity {
        from
        to
      }
      uuid
      name
      address_type {
        user_key
      }
    }
  }
}

query GetFacetClass($facet_user_key: String!, $class_user_key: String!) {
  classes(filter: {user_keys: [$class_user_key], facet: {user_keys: [$facet_user_key]}}) {
    objects {
      current {
        uuid
        user_key
        name
        scope
      }
    }
  }
}

query GetOrgUnitTimeline($unit_uuid: [UUID!]!) {
  org_units(filter: { uuids: $unit_uuid, from_date: null, to_date: null }) {
    objects {
      validities {
        validity {
          from
          to
        }
        uuid
        name
        parent {
          uuid
        }
      }
    }
  }
}

mutation _Testing_CreateEmployee(
  $uuid: UUID!
  $given_name: String!,
  $surname: String!,
) {
  employee_create(
    input: {
      uuid: $uuid,
      given_name: $given_name,
      surname: $surname,
    }
  ) {
    uuid
  }
}

mutation _Testing_CreateOrgUnit(
  $uuid: UUID!,
  $name: String!,
  $user_key: String!,
  $from_date: DateTime!,
  $org_unit_type: UUID!,
  $org_unit_level: UUID,
  $parent: UUID
) {
  org_unit_create(
    input: {
      uuid: $uuid,
      name: $name,
      user_key: $user_key,
      validity: {from: $from_date},
      org_unit_type: $org_unit_type,
      org_unit_level: $org_unit_level,
      parent: $parent
    }
  ) {
    uuid
  }
}

query _Testing_GetOrgUnit($uuid: UUID!) {
  org_units(filter: {uuids: [$uuid]}) {
    objects {
      current {
        validity {
          from
          to
        }
        uuid
        user_key
        name
        parent {
          uuid
          name
        }
        org_unit_level {
          uuid
          user_key
          name
        }
      }
    }
  }
}

mutation _Testing_CreateEngagement(
  $from_date: DateTime!,
  $org_unit: UUID!,
  $engagement_type: UUID!,
  $job_function: UUID!,
  $person: UUID!
) {
  engagement_create(
    input: {
      validity: {from: $from_date},
      org_unit: $org_unit,
      engagement_type: $engagement_type,
      job_function: $job_function,
      person: $person
    }
  ) {
    uuid
  }
}

query _Testing_GetOrgUnitAddress($org_unit: UUID!, $addr_type: UUID!) {
  org_units(filter: {uuids: [$org_unit]}) {
    objects {
      current {
        addresses(filter: {address_types: [$addr_type]}) {
          value
          user_key
        }
      }
    }
  }
}
