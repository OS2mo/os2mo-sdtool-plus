# SPDX-FileCopyrightText: Magenta ApS <https://magenta.dk>
# SPDX-License-Identifier: MPL-2.0

query GetOrganization {
  org {
    uuid
  }
}

query GetAddressTimeline($input: AddressFilter!) {
  addresses(
    filter: $input
  ) {
    objects {
      uuid
      validities {
        address_type {
          uuid
          name
          user_key
        }
        visibility_uuid
        user_key
        value
        uuid
        validity {
          from
          to
        }
      }
    }
  }
}

query AddressTypes {
  facets(filter: {user_keys: "org_unit_address_type"}) {
    objects {
      current {
        user_key
        uuid
        classes {
          uuid
          user_key
          name
        }
      }
    }
  }
}

mutation CreateAddress($input: AddressCreateInput!) {
  address_create(
    input: $input
  ) {
    uuid
    current {
      validity {
        from
        to
      }
      uuid
      name
      address_type {
        user_key
      }
    }
  }
}

mutation UpdateAddress($input: AddressUpdateInput!) {
  address_update(
    input: $input
  ) {
    uuid
    current {
      validity {
        from
        to
      }
      uuid
      name
      address_type {
        user_key
      }
    }
  }
}

mutation TerminateAddress($input: AddressTerminateInput!) {
  address_terminate(input: $input) {
    uuid
  }
}

mutation DeleteAddress($addr_uuid: UUID!) {
  address_delete(uuid: $addr_uuid) {
    uuid
  }
}

query GetFacetUuid($user_key: String!) {
  facets(filter: {user_keys: [$user_key]}) {
    objects {
      uuid
    }
  }
}
query GetClass($class_filter: ClassFilter!) {
  classes(filter: $class_filter) {
    objects {
      uuid
      current {
        uuid
        user_key
        name
        scope
        parent {
          uuid
          user_key
          scope
        }
      }
    }
  }
}

mutation CreateClass($input: ClassCreateInput!) {
  class_create(input: $input) {
    uuid
  }
}

mutation UpdateClass($input: ClassUpdateInput!) {
  class_update(input: $input) {
    uuid
  }
}


query GetOrgUnitTimeline($unit_uuid: UUID!, $from_date: DateTime, $to_date: DateTime) {
  org_units(filter: { uuids: [$unit_uuid], from_date: $from_date, to_date: $to_date }) {
    objects {
      validities {
        validity {
          from
          to
        }
        uuid
        user_key
        name
        org_unit_level {
          name
        }
        unit_type_uuid
        org_unit_hierarchy
        time_planning_uuid
        parent_uuid
        addresses {
          uuid
          name
          user_key
          value
          address_type {
            user_key
            name
          }
          visibility {
            uuid
          }
        }
      }
    }
  }
}

query GetParentRoots($input: OrganisationUnitFilter!) {
  org_units(filter: $input) {
    objects {
      uuid
    }
  }
}

query GetOrgUnitUserKeys($input: OrganisationUnitFilter!) {
  org_units(filter: $input) {
    objects {
      uuid
      validities {
        user_key
      }
    }
  }
}

mutation CreateOrgUnit($input: OrganisationUnitCreateInput!) {
  org_unit_create(input: $input) {
    uuid
  }
}

mutation UpdateOrgUnit($input: OrganisationUnitUpdateInput!) {
  org_unit_update(input: $input) {
    uuid
  }
}

mutation TerminateOrgUnit($input: OrganisationUnitTerminateInput!) {
  org_unit_terminate(input: $input) {
    uuid
  }
}

query GetOrgUnitChildren(
  $org_unit: UUID!
  $from_date: DateTime!
  $to_date: DateTime
) {
  org_units(
    filter: {
      parent: { uuids: [$org_unit], from_date: $from_date, to_date: $to_date }
      from_date: $from_date
      to_date: $to_date
    }
  ) {
    objects {
      uuid
    }
  }
}

query GetPerson($cpr: CPR!) {
  employees(
    filter: { cpr_numbers: [$cpr], from_date: null, to_date: null }
  ) {
    objects {
      uuid
    }
  }
}

query GetPersonCpr($uuid: UUID!) {
  employees(filter: { uuids: [$uuid], from_date: null, to_date: null }) {
    objects {
      validities {
        cpr_number
      }
    }
  }
}

query GetPersonTimeline($filter: EmployeeFilter) {
  employees(filter: $filter) {
    objects {
      uuid
      validities {
        addresses {
          address_type {
            user_key
            scope
          }
          name
        }
        cpr_number
        given_name
        surname
        validity {
          from
          to
        }
      }
    }
  }
}

mutation CreatePerson($input: EmployeeCreateInput!) {
  employee_create(input: $input) {
    uuid
  }
}

mutation UpdatePerson($input: EmployeeUpdateInput!) {
  employee_update(input: $input) {
    uuid
  }
}

mutation CreateEngagement($input: EngagementCreateInput!) {
  engagement_create(input: $input) {
    uuid
  }
}

query GetEngagements($input: EngagementFilter!) {
  engagements(filter: $input) {
    objects {
      uuid
      validities {
        user_key
        validity {
          from
          to
        }
        person {
          cpr_number
        }
      }
    }
  }
}

query GetEngagementTimeline(
  $person: UUID!,
  $user_key: String!,
  $from_date: DateTime,
  $to_date: DateTime
) {
  engagements(
    filter: {
      employee: { uuids: [$person] },
      user_keys: [$user_key],
      from_date: $from_date,
      to_date: $to_date
    }
  ) {
    objects {
      uuid
      validities {
        user_key
        primary {
          uuid
        }
        validity {
          from
          to
        }
        extension_1
        extension_2
        extension_3
        extension_4
        extension_5
        extension_6
        extension_7
        extension_8
        extension_9
        extension_10
        person {
          uuid
        }
        org_unit(filter: {from_date: $from_date, to_date: $to_date}) {
          uuid
        }
        engagement_type {
          uuid
          user_key
          name
        }
        job_function {
          uuid
          user_key
        }
      }
    }
  }
}

mutation UpdateEngagement($input: EngagementUpdateInput!) {
  engagement_update(input: $input) {
    uuid
  }
}

mutation TerminateEngagement($input: EngagementTerminateInput!) {
  engagement_terminate(input: $input) {
    uuid
  }
}

query GetLeave($filter: LeaveFilter!) {
  leaves(filter: $filter) {
    objects {
      uuid
      validities {
        user_key
        person {
          uuid
        }
        engagement {
          uuid
        }
        leave_type {
          uuid
        }
        validity {
          from
          to
        }
      }
    }
  }
}

mutation CreateLeave($input: LeaveCreateInput!) {
  leave_create(input: $input) {
    uuid
  }
}

mutation UpdateLeave($input: LeaveUpdateInput!) {
  leave_update(input: $input) {
    uuid
  }
}

mutation TerminateLeave($input: LeaveTerminateInput!) {
  leave_terminate(input: $input) {
    uuid
  }
}

query GetAssociationTimeline($input: AssociationFilter!) {
  associations(filter: $input) {
    objects {
      uuid
      validities {
        user_key
        employee_uuid
        org_unit_uuid
        validity {
          from
          to
        }
      }
    }
  }
}

mutation CreateAssociation($input: AssociationCreateInput!) {
  association_create(input: $input) {
    uuid
  }
}

mutation UpdateAssociation($input: AssociationUpdateInput!) {
  association_update(input: $input) {
    uuid
  }
}

mutation TerminateAssociation($input: AssociationTerminateInput!) {
  association_terminate(input: $input) {
    uuid
  }
}

query GetRelatedUnits($filter: RelatedUnitFilter!) {
  related_units(filter: $filter) {
    objects {
      validities {
        uuid
        validity {
          from
          to
        }
        org_units {
          uuid
        }
      }
    }
  }
}

mutation SendEvent($input: EventSendInput!) {
  event_send(input: $input)
}

mutation _Testing_UpdateRelatedUnits($input: RelatedUnitsUpdateInput!) {
  related_units_update(input: $input) {
    uuid
  }
}

mutation _Testing_CreateEmployee(
  $uuid: UUID!
  $given_name: String!,
  $surname: String!,
) {
  employee_create(
    input: {
      uuid: $uuid,
      given_name: $given_name,
      surname: $surname,
    }
  ) {
    uuid
  }
}

mutation _Testing_CreateOrgUnit(
  $uuid: UUID!,
  $name: String!,
  $user_key: String!,
  $from_date: DateTime!,
  $org_unit_type: UUID!,
  $org_unit_level: UUID,
  $parent: UUID
) {
  org_unit_create(
    input: {
      uuid: $uuid,
      name: $name,
      user_key: $user_key,
      validity: {from: $from_date},
      org_unit_type: $org_unit_type,
      org_unit_level: $org_unit_level,
      parent: $parent
    }
  ) {
    uuid
  }
}

query _Testing_GetOrgUnit($uuid: UUID!) {
  org_units(filter: {uuids: [$uuid]}) {
    objects {
      current {
        validity {
          from
          to
        }
        uuid
        user_key
        name
        parent {
          uuid
          name
        }
        org_unit_level {
          uuid
          user_key
          name
        }
      }
    }
  }
}

mutation _Testing_CreateEngagement(
  $from_date: DateTime!,
  $org_unit: UUID!,
  $engagement_type: UUID!,
  $job_function: UUID!,
  $person: UUID!
) {
  engagement_create(
    input: {
      validity: {from: $from_date},
      org_unit: $org_unit,
      engagement_type: $engagement_type,
      job_function: $job_function,
      person: $person
    }
  ) {
    uuid
  }
}

query _Testing_GetOrgUnitAddress($org_unit: UUID!, $addr_type: UUID!) {
  org_units(filter: {uuids: [$org_unit]}) {
    objects {
      current {
        addresses(filter: {address_types: [$addr_type]}) {
          value
          user_key
        }
      }
    }
  }
}
